<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[南峰子的技术博客]]></title>
  <link href="http://southpeak.github.io/atom.xml" rel="self"/>
  <link href="http://southpeak.github.io/"/>
  <updated>2014-07-17T23:33:26+08:00</updated>
  <id>http://southpeak.github.io/</id>
  <author>
    <name><![CDATA[南峰子]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS中流(Stream)的使用]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/17/ioszhong-liu-stream-de-shi-yong/"/>
    <updated>2014-07-17T23:30:26+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/17/ioszhong-liu-stream-de-shi-yong</id>
    <content type="html"><![CDATA[<p>流提供了一种简单的方式在不同和介质中交换数据，这种交换方式是与设备无关的。流是在通信路径中串行传输的连续的比特位序列。从编码的角度来看，流是单向的，因此流可以是输入流或输出流。除了基于文件的流外，其它形式的流都是不可查找的，这些流的数据一旦消耗完后，就无法从流对象中再次获取。</p>

<p>在Cocoa中包含三个与流相关的类：NSStream、NSInputStream和NSOutputStream。NSStream是一个抽象基类，定义了所有流对象的基础接口和属性。NSInputStream和NSOutputStream继承自NSStream，实现了输入流和输出流的默认行为。下图描述了流的应用场景：</p>

<p><img src="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Streams/Articles/Art/stream_src_dest.gif" alt="image" /></p>

<p>从图中看，NSInputStream可以从文件、socket和NSData对象中获取数据；NSOutputStream可以将数据写入文件、socket、内存缓存和NSData对象中。这三处类主要处理一些比较底层的任务。</p>

<p>流对象有一些相关的属性。大部分属性是用于处理网络安全和配置的，这些属性统称为SSL和SOCKS代理信息。两个比较重要的属性是：</p>

<ol>
<li>NSStreamDataWrittenToMemoryStreamKey：允许输出流查询写入到内存的数据</li>
<li>NSStreamFileCurrentOffsetKey：允许操作基于文件的流的读写位置</li>
</ol>


<p>可以给流对象指定一个代理对象。如果没有指定，则流对象作为自己的代理。流对象调用唯一的代理方法stream:handleEvent:来处理流相关的事件：</p>

<ol>
<li>对于输入流来说，是有可用的数据可读取事件。我们可以使用read:maxLength:方法从流中获取数据</li>
<li>对于输出流来说，是准备好写入的数据事件。我们可以使用write:maxLength:方法将数据写入流</li>
</ol>


<p>Cocoa中的流对象与Core Foundation中的流对象是对应的。我们可以通过toll-free桥接方法来进行相互转换。NSStream、NSInputStream和NSOutputStream分别对应CFStream、CFReadStream和CFWriteStream。但这两者间不是完全一样的。Core Foundation一般使用回调函数来处理数据。另外我们可以子类化NSStream、NSInputStream和NSOutputStream，来自定义一些属性和行为，而Core Foundation中的流对象则无法进行扩展。</p>

<p>上面主要介绍了iOS中流的一些基本概念，我们下面将介绍流的具体使用，首先看看如何从流中读取数据。</p>

<h2>从输入流中读取数据</h2>

<p>从一个NSInputStream流中读取数据主要包括以下几个步骤：</p>

<ol>
<li>从数据源中创建和初始化一个NSInputStream实例</li>
<li>将流对象放入一个run loop中并打开流</li>
<li>处理流对象发送到其代理的事件</li>
<li>当没有更多数据可读取时，关闭并销毁流对象。</li>
</ol>


<h4>准备流对象</h4>

<p>要使用一个NSInputStream，必须要有数据源。数据源可以是文件、NSData对象和网络socket。创建好后，我们设置其代理对象，并将其放入到run loop中，然后打开流。代码清单1展示了这个准备过程.</p>

<h6>代理清单1</h6>

<pre><code>- (void)setUpStreamForFile:(NSString *)path
{
    NSInputStream *inputStream = [[NSInputStream alloc] initWithFileAtPath:path];
    inputStream.delegate = self;
    [inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];

    [inputStream open];
}
</code></pre>

<p>在流对象放入run loop且有流事件(有可读数据)发生时，流对象会向代理对象发送stream:handleEvent:消息。在打开流之前，我们需要调用流对象的scheduleInRunLoop:forMode:方法，这样做可以避免在没有数据可读时阻塞代理对象的操作。我们需要确保的是流对象被放入正确的run loop中，即放入流事件发生的那个线程的run loop中。</p>

<h4>处理流事件</h4>

<p>打开流后，我们可以使用streamStatus属性查看流的状态，用hasBytesAvailable属性检测是否有可读的数据，用streamError来查看流处理过程中产生的错误。</p>

<p>流一旦打开后，将会持续发送stream:handleEvent:消息给代理对象，直到流结束为止。这个消息接收一个NSStreamEvent常量作为参数，以标识事件的类型。对于NSInputStream对象，主要的事件类型包括NSStreamEventOpenCompleted、NSStreamEventHasBytesAvailable和NSStreamEventEndEncountered。通常我们会对NSStreamEventHasBytesAvailable更感兴趣。代理清单2演示了从流中获取数据的过程</p>

<h6>代理清单2</h6>

<pre><code>- (void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode
{
    switch (eventCode) {
        case NSStreamEventHasBytesAvailable:
        {
            if (!data) {
                data = [NSMutableData data];
            }

            uint8_t buf[1024];
            unsigned int len = 0;
            len = [(NSInputStream *)aStream read:buf maxLength:1024];  // 读取数据
            if (len) {
                [data appendBytes:(const void *)buf length:len];
            }
        }
            break;
    }
}
</code></pre>

<p>当NSInputStream在处理流的过程中出现错误时，它将停止流处理并产生一个NSStreamEventErrorOccurred事件给代理。我们同样的上面的代理方法中来处理这个事件。</p>

<h4>清理流对象</h4>

<p>当NSInputStream读取到流的结尾时，会发送一个NSStreamEventEndEncountered事件给代理，代理对象应该销毁流对象，此过程应该与创建时相对应，代码清单3演示了关闭和释放流对象的过程。</p>

<h6>代理清单3</h6>

<pre><code>- (void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode
{
    switch (eventCode) {
        case NSStreamEventEndEncountered:
        {
            [aStream close];
            [aStream removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
            aStream = nil;
        }
            break;
    }
}
</code></pre>

<h2>写入数据到输出流</h2>

<p>类似于从输入流读取数据，写入数据到输出流时，需要下面几个步骤：</p>

<ol>
<li>使用要写入的数据创建和初始化一个NSOutputStream实例，并设置代理对象</li>
<li>将流对象放到run loop中并打开流</li>
<li>处理流对象发送到代理对象中的事件</li>
<li>如果流对象写入数据到内存，则通过请求NSStreamDataWrittenToMemoryStreamKey属性来获取数据</li>
<li>当没有更多数据可供写入时，处理流对象</li>
</ol>


<p>基本流程与输入流的读取差不多，我们主要介绍不同的地方</p>

<ol>
<li>数据可写入的位置包括文件、C缓存、程序内存和网络socket。</li>
<li>hasSpaceAvailable属性表示是否有空间来写入数据</li>
<li>在stream:handleEvent:中主要处理NSStreamEventHasSpaceAvailable事件，并调用流的write:maxLength方法写数据。代码清单4演示了这一过程。</li>
<li>如果NSOutputStream对象的目标是应用的内存时，在NSStreamEventEndEncountered事件中可能需要从内存中获取流中的数据。我们将调用NSOutputStream对象的propertyForKey:的属性，并指定key为NSStreamDataWrittenToMemoryStreamKey来获取这些数据。</li>
</ol>


<h6>代理清单4</h6>

<pre><code>- (void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode
{
    switch (eventCode) {
        case NSStreamEventHasSpaceAvailable:
        {
            uint8_t *readBytes = (uint8_t *)[data mutableBytes];
            readBytes += byteIndex;
            int data_len = [data length];
            unsigned int len = (data_len - byteIndex &gt;= 1024) ? 1024 : (data_len - byteIndex);
            uint8_t buf[len];

            (void)memcpy(buf, readBytes, len);

            len = [aStream write:(const uint_8 *)buf maxLength:len];
            byteIndex += len;
            break;
        }
    }
}
</code></pre>

<p>这里需要注意的是：当代理接收到NSStreamEventHasSpaceAvailable事件而没有写入任何数据到流时，代理将不再从run loop中接收该事件，直到NSOutputStream对象接收到更多数据，这时run loop会重启NSStreamEventHasSpaceAvailable事件。</p>

<h2>流的轮循处理</h2>

<p>在流的处理过程中，除了将流放入run loop来处理流事件外，还可以对流进行轮循处理。我们将流处理数据的过程放到一个循环中，并在循环中不断地去询问流是否有可用的数据供读取(hasBytesAvailable)或可用的空间供写入(hasSpaceAvailable)。当处理到流的结尾时，我们跳出循环结束流的操作。</p>

<p>具体的过程如代码清单5所示</p>

<p>代码清单5</p>

<pre><code>- (void)createNewFile {     NSOutputStream *oStream = [[NSOutputStream alloc] initToMemory];        [oStream open];         ￼￼￼uint8_t *readBytes = (uint8_t *)[data mutableBytes];       uint8_t buf[1024];      int len = 1024;
            while (1) {         if (len == 0) break;
                    if ([oStream hasSpaceAvailable])
        {               (void)strncpy(buf, readBytes, len);             readBytes += len;               if ([oStream write:(const uint8_t *)buf maxLength:len] == -1)
            {                   [self handleError:[oStream streamError]];                   break;
            }               [bytesWritten setIntValue:[bytesWritten intValue]+len];             len = (([data length] - [bytesWritten intValue] &gt;= 1024) ? 1024 : [data length] - [bytesWritten intValue]);         }       }       NSData *newData = [oStream propertyForKey:NSStreamDataWrittenToMemoryStreamKey];
            if (!newData) {         NSLog(@"No data written to memory!");       } else {            [self processData:newData];     }
            [oStream close];        [oStream release];      oStream = nil;  }
</code></pre>

<p>这种处理方法的问题在于它会阻塞当前线程，直到流处理结束为止，才继续进行后面的操作。而这种问题在处理网络socket流时尤为严重，我们必须等待服务端数据回来后才能继续操作。因此，通常情况下，建议使用run loop方式来处理流事件。</p>

<h2>错误处理</h2>

<p>当流出现错误时，会停止对流数据的处理。一个流对象在出现错误时，不能再用于读或写操作，虽然在关闭前可以查询它的状态。</p>

<p>NSStream和NSOutputStream类会以几种方式来告知错误的发生：</p>

<ol>
<li>如果流被放到run loop中，对象会发送一个NSStreamEventErrorOccurred事件到代理对象的stream:handleEvent:方法中</li>
<li>任何时候，可以调用streamStatus属性来查看是否发生错误(返回NSStreamStatusError)</li>
<li>如果在通过调用write:maxLength:写入数据到NSOutputStream对象时返回-1，则发生一个写错误。</li>
</ol>


<p>一旦确定产生错误时，我们可以调用流对象的streamError属性来查看错误的详细信息。在此我们不再举例。</p>

<h2>设置Socket流</h2>

<p>在iOS中，NSStream类不支持连接到远程主机，幸运的是CFStream支持。前面已经说过这两者可以通过toll-free桥接来相互转换。使用CFStream时，我们可以调用CFStreamCreatePairWithSocketToHost函数并传递主机名和端口号，来获取一个CFReadStreamRef和一个CFWriteStreamRef来进行通信，然后我们可以将它们转换为NSInputStream和NSOutputStream对象来处理。</p>

<p>具体的处理流程我们会在后期详细讨论。</p>

<p>参考</p>

<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Streams/Streams.html">Stream Programming Guide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL加载系统之四：认证与TLS链验证]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/16/urljia-zai-xi-tong-zhi-si-:ren-zheng-yu-tlslian-yan-zheng/"/>
    <updated>2014-07-16T18:51:03+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/16/urljia-zai-xi-tong-zhi-si-:ren-zheng-yu-tlslian-yan-zheng</id>
    <content type="html"><![CDATA[<p>一个NSURLRequest对象经常会遇到认证请求，或者需要从其所连接的服务端请求证书。当需要认证请求时，NSURLConnection、NSURLSession和NSURLDownload类会通知它们的代理对象，以便能正确地做处理。不过需要注意的是，URL加载系统只有在服务端响应包含WWW-Authenticate头时才会调用代理来处理认证请求，而类似于代理认证和TLS信任验证这样的认证类型则不需要这个头。</p>

<h2>确定如何响应一个认证请求</h2>

<p>如果一个NSURLRequest对象需要认证时，则认证请求方式取决于使用的对象的类型：</p>

<ol>
<li>如果请求是与NSURLSession对象关联，则所有认证请求都会传递给代理，而不考虑认证的类型。</li>
<li>如果请求是与NSURLConnection或NSURLDownload对象，则对象的代理接收一个connection:canAuthenticateAgainstProtectionSpace: (或者 download:canAuthenticateAgainstProtectionSpace:) 消息。这允许代理对象在尝试再次认证前分析服务端的属性，包括协议和认证方法。如果我们的代理对象不准备认证服务端的受保护空间，则返回NO，且系统尝试使用用户的keychain的信息进行认证。</li>
<li>如果NSURLConnection或NSURLDownload的代理对象没有实现connection:canAuthenticateAgainstProtectionSpace: (或者 download:canAuthenticateAgainstProtectionSpace:)方法，且保护空间使用客户端证书认证或服务端信任认证，则系统假设我们返回NO。而对象其它所有类型，系统都返回YES。</li>
</ol>


<p>下一步，如果我们的代理对象同意处理认证，但是没有有效的证书（不管是作为请求URL的一部分或者在NSURLCredentialStorage中共享），则代理以收到以下消息：</p>

<ol>
<li>URLSession:didReceiveChallenge:completionHandler:2. URLSession:task:didReceiveChallenge:completionHandler:3. connection:didReceiveAuthenticationChallenge:4. download:didReceiveAuthenticationChallenge:</li>
</ol>


<p>为了让连接能够继续，则代理对象有三种选择：</p>

<ol>
<li>提供认证证书</li>
<li>尝试在没有证书的情况下继续</li>
<li>取消认证查询</li>
</ol>


<p>为了确保操作的正确流程，传递给这些方法的NSURLAuthenticationChallenge实例会包含一些信息，包括是什么触发了认证查询、查询的尝试次数、任何先前尝试的证书、请求证书的NSURLProtectionSpace对象，及查询的发送者。</p>

<p>如果认证请求事先尝试认证且失败了(如用户在服务端修改了密码)，我们可以通过在认证请求调用proposedCredential来获取尝试凭据。代理可以使用这些证书来填充一个显示给用户的话框。</p>

<p>调用认证请求的previousFailureCount可以返回身份验证尝试次数，这些尝试包括不同认证协议的尝试请求。代理可以将这些方法提供给用户，以确定先前提供的证书是否失败，或限制最大认证尝试次数。</p>

<h2>响应认证请求</h2>

<p>前面说过三种响应我们响应connection:didReceiveAuthenticationChallenge:代理方法的方式，我们将逐一介绍：</p>

<h4>提供证书</h4>

<p>为了进行认证，程序需要使用服务端期望的认证信息创建一个NSURLCredential对象。我们可以调用authenticationMethod来确定服务端的认证方法，这个认证方法是在提供的认证请求的保护空间中。NSURLCredential支持一些方法：</p>

<ol>
<li>HTTP基本认证(NSURLAuthenticationMethodHTTPBasic)：需要用户名和密码。提示用户输入必要信息并使用credentialWithUser:password:persistence:方法创建一个NSURLCredential对象。</li>
<li>HTTP数字认证(NSURLAuthenticationMethodHTTPDigest):类似于基本认证，需要用户名和密码。提示用户输入必要信息并使用credentialWithUser:password:persistence:方法创建一个NSURLCredential对象。</li>
<li>客户端证书认证(NSURLAuthenticationMethodClientCertificate): 需要系统标识和所有服务端认证所需要的证书。然后使用credentialWithIdentity:certificates:persistence:来创建一个NSURLCredential对象。</li>
<li>服务端信任认证(NSURLAuthenticationMethodServerTrust)需要一个由认证请求的保护空间提供的信任。使用credentialForTrust:来创建一个NSURLCredential对象。</li>
</ol>


<p>在创建NSURLCredential对象后</p>

<ol>
<li>对于NSURLSession，使用提供的完成处理block将该对象传递给认证请求发送者</li>
<li>对于NSURLConnection和NSURLDownload，使用useCredential:forAuthenticationChallenge:方法将对象传递给认证请求发送者。</li>
</ol>


<h4>尝试在没有证书的情况下继续</h4>

<p>如果代理选择不提供证书，可以尝试继续操作：</p>

<ol>
<li>对于NSURLSession，传递下面的值给完成处理block:
 NSURLSessionAuthChallengePerformDefaultHandling:处理请求。尽管代理没有提供代理方法来处理认证请求
 NSURLSessionAuthChallengeRejectProtectionSpace:拒绝请求。依赖于服务端响应允许的认证类型，URL加载类可能多次调用这个代理方法。</li>
<li>对于NSURLConnection和NSURLDownload，在[challenge sender]中调用continueWithoutCredentialsForAuthenticationChallenge:。</li>
</ol>


<p>依赖于协议的实现，这种处理方法可能会导致连接失败而以送connectionDidFailWithError:消息，或者返回可选的不需要认证的URL内容。</p>

<h4>取消连接</h4>

<p>代理可以选择取消认证请求</p>

<ol>
<li>对于NSURLSession，传递NSURLSessionAuthChallengeCancelAuthenticationChallenge给完成处理block</li>
<li>对于NSURLConnection和NSURLDownload，在[challenge sender]中调用cancelAuthenticationChallenge:。代理接收connection:didCancelAuthenticationChallenge:消息，以提供用户反馈的机会。</li>
</ol>


<p>下面的代码演示了使用用户名和密码创建NSURLCredential对象来响应认证请求</p>

<pre><code>-(void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
    {
    if ([challenge previousFailureCount] == 0)

    {
                NSURLCredential *newCredential;
        newCredential = [NSURLCredential credentialWithUser:[self preferencesName] password:[self preferencesPassword] persistence:NSURLCredentialPersistenceNone];
        [[challenge sender] useCredential:newCredential forAuthenticationChallenge:challenge];
    }

    else

    {           [[challenge sender] cancelAuthenticationChallenge:challenge];           // inform the user that the user name and password          // in the preferences are incorrect         [self showPreferencesCredentialsAreIncorrectPanel:self];        }

}
</code></pre>

<p>如果代理没有实现connection:didReceiveAuthenticationChallenge:，而请求需要认证，则有效的证书必须位于URL证书存储中或作为请求URL的一部分。如果证书无效或者认证失败，则底层实现会发送一个continueWithoutCredentialForAuthenticationChallenge:消息。</p>

<h2>执行自定义TLS链验证</h2>

<p>在NSURL系统的AIP中，TLS链验证由应用的认证代理方法来处理，但它不是提供证书给服务端以验证用户，而是在TLS握手的过程中校验服务端提供的证书，然后再告诉URL加载系统是否应该接受还是拒绝这些证书。</p>

<p>如果需要以非标准的方法(如接收一个指定的自标识的证书用于测试)来执行链验证，则应用必须如下处理：</p>

<ol>
<li>对于NSURLSession，实现URLSession:didReceiveChallenge:completionHandler:和URLSession:task:didReceiveChallenge:completionHandler:代理方法。如果实现了两者，由会话级别的方法负责处理认证。</li>
<li>对于NSURLConnection和NSURLDownload，实现connection:canAuthenticateAgainstProtectionSpace:和download:canAuthenticateAgainstProtectionSpace:方法，如果保护空间有一个NSURLAuthenticationMethodServerTrust类型的认证，则返回YES。然后，实现connection:didReceiveAuthenticationChallenge:或download:didReceiveAuthenticationChallenge:方法来处理认证。</li>
</ol>


<p>在认证处理代理方法中，我们需要确认认证保护空间是否有NSURLAuthenticationMethodServerTrust类型的认证，如果有，则从保护空间获取serverTrust信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL加载系统之三：NSURLConnection]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/15/urljia-zai-xi-tong-zhi-san-:nsurlconnection/"/>
    <updated>2014-07-15T18:37:44+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/15/urljia-zai-xi-tong-zhi-san-:nsurlconnection</id>
    <content type="html"><![CDATA[<p>NSURLConnection提供了简单的接口来创建和取消一个连接，并支持一个代理方法的集合来提供连接的响应，并对连接进行多方面的控制。这个类的方法可以分为5大类：URL加载、缓存管理、认证与证书、cookie存储、协议支持。</p>

<h2>创建一个连接</h2>

<p>NSURLConnection提供了三种方式来获取URL的内容：同步、异步使用完成处理器block、异步使用自定义的代理对象。</p>

<ol>
<li>使用同步请求时，一般是在后台线程中独占线程运行，我们可以调用sendSynchronousRequest:returningResponse:error: 方法来执行HTTP请求。当请求完成或返回错误时，该方法会返回。</li>
<li>如果我们不需要监听请求的状态，而只是在数据完成返回时执行一些操作，则可以调用sendAsynchronousRequest:queue:completionHandler:方法来执行一个异步操作，其中需要传递一个block来处理结果。</li>
<li>我们也可以创建一个代理对象来处理异步请求，此时我们需要实现以下方法：connection:didReceiveResponse:、connection:didReceiveData:、connection:didFailWithError:和connectionDidFinishLoading: 。这些方法在NSURLConnectionDelegate、NSURLConnectionDownloadDelegate和 NSURLConnectionDataDelegate协议中定义。</li>
</ol>


<p>代码清单1以代理对象异步请求为例，初始化了一个URL连接并实现代理方法来处理连接响应</p>

<pre><code>@interface Conn : NSObject
{
    NSURLConnection *theConnection;
    NSMutableData *receivedData;
}

@end

@implementation Conn

- (void)createConnection
{
    // 创建一个请求
    NSURLRequest *theRequest=[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.apple.com/"]
                                              cachePolicy:NSURLRequestUseProtocolCachePolicy
                                          timeoutInterval:60.0];
    
    // 创建NSMutableData来保存接收到的数据
    receivedData = [NSMutableData dataWithCapacity: 0];
    
    // 使用theRequest创建一个连接并开始加载数据
    // 调用initWithRequest:delegate后会立即开始传输
    // 请求可以在connectionDidFinishLoading:或connection:didFailWithError:消息被发送前通过调用cancel来取消
    theConnection = [[NSURLConnection alloc] initWithRequest:theRequest delegate:self];
    
    if (!theConnection) {
        // 释放receivedData对象
        receivedData = nil;
        // 通知用户连接失败
    }
}

// 当服务端提供了有效的数据来创建NSURLResponse对象时，代理会收到connection:didReceiveResponse:消息。
// 这个代理方法会检查NSURLResponse对象并确认数据的content-type，MIME类型，文件 名和其它元数据。
// 需要注意的是，对于单个连接，我们可能会接多次收到connection:didReceiveResponse:消息；这咱情况发生在
// 响应是多重MIME编码的情况下。每次代理接收到connection:didReceiveResponse:时，应该重设进度标识
// 并丢弃之前接收到的数据。
- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    [receivedData setLength:0];
}

// 代理会定期接收到connection:didReceiveData:消息，该消息用于接收服务端返回的数据实体。该方法负责存储数据。
// 我们也可以用这个方法提供进度信息，这种情况下，我们需要在connection:didReceiveResponse:方法中
// 调用响应对象的expectedContentLength方法来获取数据的总长度。
- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
{
    [receivedData appendData:data];
}

// 如果数据传输的过程中出现了错误，代理会接收到connection:didFailWithError:消息。其中error参数给出了错误信息。
// 在代理收到connection:didFailWithError:消息后，它不会再接收指定连接的代理消息。
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    theConnection = nil;
    receivedData = nil;

    NSLog(@"Connection failed! Error - %@ %@", [error localizedDescription], [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);
}

// 如果成功获取服务端返回的所有数据，则代理会收到connectionDidFinishLoading:消息。
- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    NSLog(@"Succeeded! Receive %lu bytes of data(unsigned long)",[receivedData length]);

    theConnection = nil;
    receivedData = nil;
}

@end
</code></pre>

<h2>发起一个POST请求</h2>

<p>我们可以像发起其它URL请求一样，发起一个HTTP或HTTPS POST请求。主要的区别在于我们必须先配置好NSMutableURLRequest对象，并将其作为参数传递给initWithRequest:delegate:方法。</p>

<p>另外，我们还需要构造请求的body数据。可以以下面三种方式来处理</p>

<ol>
<li>对于上传短小的内存数据，我们需要对已存在的数据块进行URL编码</li>
<li>如果是从磁盘中上传文件，则调用setHTTPBodyStream:方法来告诉NSMutableURLRequest从一个NSInputStream中读取并使用结果数据作为body的内容</li>
<li>对于大块的数据，调用CFStreamCreateBoundPair来创建流对象对，然后调用setHTTPBodyStream:方法来告诉NSMutableURLRequest使用这些流对象中的一个作为body内容的源。通过将数据写入其它流，可以一次发送一小块数据。</li>
</ol>


<p>如果要上传数据到一个兼容的服务器中，URL加载系统同样支持100（继续）状态码，这样允许一个上传操作在发生认证错误或其它失败时仍能继续。为了开启这个操作，可以设置请求对象的expect头为100-continue。</p>

<p>代码清单2展示了如何配置一个POST请求的NSMutableURLRequest对象</p>

<pre><code>- (void)setRequestForPost
{
    // 对于application/x-www-form-urlencoded类型的body数据，form域的参数由&amp;号分开，
    NSString *bodyData = @"name=Jane+Doe&amp;address=123+Main+St";
    NSMutableURLRequest *postRequest = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.apple.com"]];
    
    // 设置content-type为application/x-www-form-urlencoded
    [postRequest setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
    
    // 指定请求方法为POST
    [postRequest setHTTPMethod:@"POST"];
    [postRequest setHTTPBody:[NSData dataWithBytes:[bodyData UTF8String] length:strlen([bodyData UTF8String])]];
    
    // Initialize the NSURLConnection and proceed as described in
    // Retrieving the Contents of a URL
    
}
</code></pre>

<h2>使用Block来接收数据</h2>

<p>NSURLConnection类提供了类方法sendAsynchronousRequest:queue:completionHandler:，该方法可以以异常的方式向服务端发起请求，并在数据返回或发生错误/超时时调用block来处理。该方法需要一个请求对象，一个完成处理block，及block运行的队列。当请求完成或错误发生时，URL加载系统调用该block来处理结果数据或错误信息。</p>

<p>如果请求成功，则会传递一个NSData对象和一个NSURLResponse对象给block。如果失败，则传递一个NSError对象。</p>

<p>这个方法有两个限制</p>

<ol>
<li>对于需要认证的请求，只提供最小的支持。</li>
<li>没有办法来修改响应缓存和服务端重定向的默认行为。</li>
</ol>


<p>参考：
<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html">URL Loading System Programming Guide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL加载系统之二：NSURLSession]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/11/urljia-zai-xi-tong-zhi-er-:nsurlsession/"/>
    <updated>2014-07-11T22:48:27+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/11/urljia-zai-xi-tong-zhi-er-:nsurlsession</id>
    <content type="html"><![CDATA[<p>NSURLSession及相关的类提供通过HTTP协议下载数据的API。该类提供了大量代理方法来支持认证和后台下载(程序未运行或挂起时)功能。</p>

<p>为了使用NSURLSession，我们的应用会创建一系列的会话，每个会话负责协调一组相关数据的传输任务。在每个会话中，我们的应用添加一系列的任务，每个任务都表示一个对指定URL的请求。与大多数网络API一样，NSURLSession  API是异步的。如果我们使用系统提供的代理，我们必须提供一个请求完成处理block，以便在请求成功或失败时返回数据给我们的应用。如果我们提供自定义的代理对象，则任务对象调用这些代理方法，并回传从服务端获取的数据（如果是文件下载，则当传输完成时调用）。</p>

<p>NSURLSession提供了status和progress属性，并作为额外的信息传递给代理。同时它支持取消、恢复、挂起操作，并支持断点续传功能。</p>

<p>要掌握NSURLSession的使用，我们需要了解下URL会话的一些内容</p>

<h2>URL会话</h2>

<p>在一个会话中的任务的行为取决于三个方面：</p>

<ol>
<li>session的类型（由创建会话时的配置对象确定）</li>
<li>任务的类型</li>
<li>当任务创建时应用是否在前台</li>
</ol>


<p>NSURLSession支持以下三种会话类型：</p>

<ol>
<li>默认会话：行为与其它下载URL的Foundation方法类似。使用基于磁盘的缓存策略，并在用户keychain中存储证书。</li>
<li>短暂会话(Ephemeral sessions)：不存储任何数据在磁盘中；所有的缓存，证书存储等都保存在RAM中并与会话绑定。这样，当应用结束会话时，它们被自动释放。</li>
<li>后台会话(Background sessions)：类似于默认会话，除了有一个独立的进程来处理所有的数据传输。</li>
</ol>


<p>在一个会话中，NSURLSession支持三种任务类型</p>

<ol>
<li>数据任务：使用NSData对象来发送和接收数据。数据任务可以分片返回数据，也可以通过完成处理器一次性返回数据。由于数据任务不存储数据到文件，所以不支持后台会话.</li>
<li>下载任务：以文件的形式接收数据，当程序不运行时支持后台下载</li>
<li>上传任务：通常以文件的形式发送数据，支持后台上传。</li>
</ol>


<p>NSURLSession支持在程序挂起时在后台传输数据。后台传输只由使用后台会话配置对象创建的会话提供。使用后台会话时，由于实际传输是在一个独立的进程中传输，且重启应用进程相当损耗资源，只有少量特性可以使用，所以有以下限制：</p>

<ol>
<li>会话必须提供事件分发的代理。</li>
<li>只支持HTTP和HTTPS协议</li>
<li>只支持上传和下载任务</li>
<li>总是伴随着重定义操作</li>
<li>如果当应用在后台时初始化的后台传输，则配置对象的discretionary属性为true</li>
</ol>


<p>在iOS中，当我们的应用不再运行时，如果后台下载任务完成或者需要证书，则系统会在后台自动重启我们的应用，同时调用UIApplicationDelegate对象的application:handlerEventsForBackgroundURLSession:completionHandler:方法。这个调用会提供启动的应用的session的标识。我们的应用应该存储完成处理器，使用相同的标识来创建后台配置对象，然后使用配置对象来创建会话。新的会话会与运行的后台activity关联。当会话完成后台下载任务时，会给会话代理发送一个URLSessioinDidFinishEventsForBackgroundURLSession:消息。我们的代理对象然后调用存储的完成处理器。</p>

<p>如果在程序挂起时有任何任务完成，则会调用URLSession:downloadTask:didFinishDownloadingToURL:方法。同样的，如果任务需要证书，则NSURLSession对象会在适当的时候调用URLSession:task:didReceiveChallenge:completionHandler: 和URLSession:didReceiveChallenge:completionHandler:方法。</p>

<p>这里需要注意的是必须为每个标识创建一个会话，共享相同标识的多个会话的行为是未定义的。</p>

<p>会话和任务对象实现了NSCopying协议：</p>

<ol>
<li>当应用拷贝一个会话或任务对象时，会获取相同对象的指针</li>
<li>当应用拷贝一个配置对象时，会获取一个可单独修改的新的对象</li>
</ol>


<h2>创建并配置NSURLSession</h2>

<p>我们下面举个简单的实例来说明一个NSURLSession与服务端的数据交互。</p>

<h6>代码清单1：声明三种类型会话对象</h6>

<pre><code>@interface URLSession : NSObject &lt;NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate&gt;

@property (nonatomic, strong) NSURLSession *backgroundSession;
@property (nonatomic, strong) NSURLSession *defaultSession;
@property (nonatomic, strong) NSURLSession *ephemeralSession;
@property (nonatomic, strong) NSMutableDictionary *completionHandlerDictionary;

- (void)addCompletionHandler:(CompletionHandlerType)handler forSession:(NSString *)identifier;

- (void)callCompletionHandlerForSession:(NSString *)identifier;

@end
</code></pre>

<p>NSURLSession提供了大量的配置选项，包括：</p>

<ol>
<li>支持缓存、cookie，认证及协议的私有存储</li>
<li>认证</li>
<li>上传下载文件</li>
<li>每个主机的配置最大数</li>
<li>超时时间</li>
<li>支持的TLS最小最小版本</li>
<li>自定义代理字典</li>
<li>控制cookie策略</li>
<li>控制HTTP管道行为</li>
</ol>


<p>由于大部分设置都包含在一个独立的配置对象中，所以我们可以重用这些配置。当我们初始一个会话对象时，我们指定了如下内容</p>

<ol>
<li>一个配置对象，用于管理其中的会话和任务的行为</li>
<li>一个代理对象，用于在收到数据时处理输入数据，及会话和任务中的其它事件，如服务端认证、确定一个资源加载请求是否应该转换成下载等。这个对象是可选的。但如果我们需要执行后台传输，则必须提供自定义代理。</li>
</ol>


<p>在实例一个会话对象后，我们不能改变改变配置或代理。</p>

<h6>代码清单2演示了如何创建一个会话</h6>

<pre><code>NSURLSessionConfiguration *defaultConfigObject = [NSURLSessionConfiguration defaultSessionConfiguration];
        
// 配置会话的缓存
NSString *cachePath = @"/MyCacheDirectory";
        
NSArray *pathList = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
NSString *path = [pathList objectAtIndex:0];
        
NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
        
NSString *fullCachePath = [[path stringByAppendingPathComponent:bundleIdentifier] stringByAppendingPathComponent:cachePath];
        
NSLog(@"Cache path: %@", fullCachePath);
        
NSURLCache *cache = [[NSURLCache alloc] initWithMemoryCapacity:16384 diskCapacity:268435456 diskPath:cachePath];
defaultConfigObject.URLCache = cache;
defaultConfigObject.requestCachePolicy = NSURLRequestUseProtocolCachePolicy;
        
self.defaultSession = [NSURLSession sessionWithConfiguration:defaultConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];
</code></pre>

<p>除了后台配置对象外，我们可以重用会话的配置对象来创建新的会话，正如上面所讲的，拷贝一个配置对象会生成一个新的独立的配置对象。我们可以在任何时候安全的修改配置对象。当创建一个会话时，会话会对配置对象进行深拷贝，所以修改只会影响到新的会话。代理清单3演示了创建一个新的会话，这个会话使用重用的配置对象。</p>

<h6>代码清单3：重用会话对象</h6>

<pre><code>self.ephemeralSession = [NSURLSession sessionWithConfiguration:ephemeralConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];
        
ephemeralConfigObject.allowsCellularAccess = YES;
        
// ...
NSURLSession *ephemeralSessionWifiOnly = [NSURLSession sessionWithConfiguration:ephemeralConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];
</code></pre>

<p>使用NSURLSession获取数据基本就是两步：</p>

<ol>
<li>创建一个配置对象及基于这个对象的会话</li>
<li>定义一个请求完成处理器来处理获取到的数据。</li>
</ol>


<p>如果使用系统提供的代理，只需要代码清单4这几行代码即可搞定</p>

<h6>代码清单4：使用系统提供代理</h6>

<pre><code>NSURLSession *delegateFreeSession = [NSURLSession sessionWithConfiguration:defaultConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];
[delegateFreeSession dataTaskWithRequest:@"http://www.sina.com"
                               completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {    
                                   NSLog(@"Got response %@", response);
                               }];
</code></pre>

<p>只是系统提供的代理只提供有限的网络行为。如果应用需要更多的处理，如自定义认证或后台下载等，则需要使用自定义的代理。使用自定义代理来获取数据时，代理必须实现以下方法：</p>

<ol>
<li>URLSession:dataTask:didReceiveData: 从请求提供数据给我们的任务，一次一个数据块</li>
<li>URLSession:task:didCompleteWithError: 表示任务已经接受了所有的数据。</li>
</ol>


<p>如果我们在URLSession:dataTask:didReceiveData:方法返回后使用数据，则需要将数据存储在某个地方。</p>

<h6>代码清单5：演示了一个数据访问实例：</h6>

<pre><code>NSURL *url = [NSURL URLWithString:@"http://www.sina.com"];
NSURLSessionDataTask *dataTask = [self.defaultSession dataTaskWithURL:url];
[dataTask resume];
</code></pre>

<p>如果远程服务器返回的状态表示需要一个认证，且认证需要连接级别的处理时，NSURLSession将调用认证相关代理方法。这个具体我们后面文章将详细讨论。</p>

<h2>处理iOS后台Activity</h2>

<p>在iOS中使用NSURLSession时，当一个下载完成时，会自动启动我们的应用。应用的代理方法application:handleEventsForBackgroundURLSession:completionHandler: 负责创建一个合适的会话，存储请求完成处理器，并在会话调用会话代理的URLSessionDidFinishEventsForBackgroundURLSession: 方法时调用这个处理器。代码清单6与代码清单7演示了这个处理流程</p>

<h6>代码清单6：iOS后台下载的会话代理方法</h6>

<pre><code>- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)session
{
    NSLog(@"background url session %@", session);
    
    if (session.configuration.identifier)
    {
        [self callCompletionHandlerForSession:session.configuration.identifier];
    }
}

- (void)callCompletionHandlerForSession:(NSString *)identifier
{
    CompletionHandlerType handler = [self.completionHandlerDictionary objectForKey:identifier];
    
    if (handler) {
        [self.completionHandlerDictionary removeObjectForKey:identifier];
        
        handler();
    }
}
</code></pre>

<h6>代码清单7：iOS后台下载的App 代理方法</h6>

<pre><code>- (void)application:(UIApplication *)application handleEventsForBackgroundURLSession:(NSString *)identifier completionHandler:(void (^)())completionHandler
{
    NSURLSessionConfiguration *backgroundConfigObject = [NSURLSessionConfiguration backgroundSessionConfiguration:identifier];
    
    URLSession *sessionDelegate = [[URLSession alloc] init];
    
    NSURLSession *backgroundSession = [NSURLSession sessionWithConfiguration:backgroundConfigObject
                                                                    delegate:sessionDelegate
                                                               delegateQueue:[NSOperationQueue mainQueue]];
    
    [sessionDelegate addCompletionHandler:completionHandler forSession:identifier];
}
</code></pre>

<p>参考：</p>

<ol>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html">URL Loading System Programming Guide</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL加载系统之一：基本结构]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/11/urljia-zai-xi-tong-zhi-%5B%3F%5D-:ji-ben-jie-gou/"/>
    <updated>2014-07-11T19:10:29+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/11/urljia-zai-xi-tong-zhi-[?]-:ji-ben-jie-gou</id>
    <content type="html"><![CDATA[<p>URL加载系统是一组类和协议的集合，它允许我们的App访问URL指定的内容的。</p>

<p>URL加载系统的核心类是NSURL，该类提供了大量方法让我们操作URLs和它指向的资源。另外它还提供了一系列的类来加载URL的内容，上传数据到服务器，管理Cookie存储，控制响应缓存，处理认证存储和授权信息，及自定义协议扩展。</p>

<p>URL Loading System可支持以下协议</p>

<ol>
<li><a href="ftp://">ftp://</a></li>
<li><a href="http://">http://</a></li>
<li><a href="https://">https://</a></li>
<li>file://</li>
<li>data://</li>
</ol>


<p>另外它还支持代理服务和网关处理。</p>

<p>URL加载系统定义了用于加载URL的类，另外还定义了一些辅助类来修改加载类的行为。这些辅助类可以分为五大类：</p>

<ol>
<li>协议支持</li>
<li>授权与认证</li>
<li>Cookie存储</li>
<li>配置管理</li>
<li>缓存管理</li>
</ol>


<p>整个URL加载系统的结构如下图所示：</p>

<p><img src="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/Art/nsobject_hierarchy_2x.png" alt="image" /></p>

<p>下面对这张图做个简单的介绍</p>

<h2>URL Loading</h2>

<p>在这张图中，我们用得最多的就是URL Loading中的这几个类。这些类允许我们从URL指定的源获取内容。根据不同的需求，我们可以使用不同的类，这主要依赖于我们应用所支持的系统版本，以及我们希望内容是以文件的形式获取还是以数据块的方式获取。对于系统的版本，主要有以下几点作为参考：</p>

<ol>
<li>在iOS7及后续版本中，推荐使用NSURLSession。</li>
<li>对于iOS7以前的版本，可以使用NSURLConnection来获取数据并加载到本地内存中。如果要保存数据，可以再将数据写入磁盘。</li>
</ol>


<p>而对于获取数据，主要看我们是获取数据到内存中还是下载文件并保存。如果只是获取数据到内存中，则有两种方法：</p>

<ol>
<li>对于简单的请求，可以使用NSURLSession</li>
<li>对于复杂的请求（如上传数据请求），提供了NSURLRequest对象来与NSURLSession和NSURLConnection一起使用。</li>
</ol>


<p>不管使用哪种方法，我们都可以获取到响应数据，为此，我们可以如下处理响应</p>

<ol>
<li>提供一个响应处理block。当URL Loading类完成从服务端接收数据时调用该block.</li>
<li>提供自定义有delegate。URL Loading类间断性地调用我们的代理方法来获取数据。在需要的情况下，我们的程序负责收集这些数据。</li>
</ol>


<p>另外，URL Loading提供了一个返回对象来封装与请求相关的元数据，如MIME类型等。</p>

<p>而如果我们需要下载文件，则有两个基本方法来处理：</p>

<ol>
<li>对于简单请求，可以使用NSURLSession</li>
<li>对于复杂请求，提供了NSURLRequest对象来与NSURLSession和NSURLDownload一起使用。</li>
</ol>


<p>相较于NSURLDownload，NSURLSession有两个明显的优势：NSURLSession可用于iOS系统，而NSURLDownload在iOS中不被支持；当应用挂起、终止或异常退出时，下载可以在后台继续进行。</p>

<p>URL Loading中还提供了两个类用于处理元数据，一个用于表示客户端请求(NSURLRequest)，一个用于表示服务端响应(NSURLResponse)。我们分别介绍一下这两个类。</p>

<h4>NSURLRequest</h4>

<p>NSURLRequest对象封装了URL和协议指定的属性，及依赖于协议的行为。同时也指定了本地缓存策略及连接超时时间。一些协议支持协议指定的属性，如HTTP协议可以添加返回HTTP请求体，请求报头和传输方法到NSURLRequest中。</p>

<p>这里需要注意的是，当我们使用NSURLRequest的子类NSMutableURLRequest初始化一个连接或下载时，将会对NSMutableURLRequest实例进行深拷贝。因此在初始的请求上做修改时不会影响到连接和下载对象。</p>

<h4>NSURLResponse</h4>

<p>一个响应可以分为两个部分：描述内容的元数据和内容数据本身。而NSURLResponse类封装了大部分协议的响应元数据，这些元数据包括MIME类型，期望的Content-Length，编码格式，及提供响应的URL。NSURLResponse的一些子类提供了与协议相关的额外元数据。如NSHTTPURLResponse存储了web服务器返回的响应头和状态码。</p>

<p>需要注意的是NSURLResponse对象只存储响应的元数据，而不存储响应数据本身。响应数据由URL Loading通过响应处理block和对象的代理来接收并处理。</p>

<h2>认证和证书</h2>

<p>针对认证和证书，URL加载系统提供了以下几个类：</p>

<ol>
<li>NSURLCredential：封装了由认证信息和持久化行为组成的证书。</li>
<li>NSURLProtectionSpace：表示需要特定证书的区域。一个保护区域可以限制到单独的URL，拥有web服务器的区域，或引用一个代理。</li>
<li>NSURLCredientialStorage：一般是一个共享实例，用于管理证书存储和提供NSURLCredential对象到NSURLProductionSpace对象的映射。</li>
<li>NSURLAuthenticationChallenge：封装了认证一个请求的的NSURLProtocol实现所需要的信息：一个建议的证书、保护空间、错误信息或者协议用于确定所需要认证的响应、以及认证尝试次数等。初始对象（即请求发送者）必须实现NSURLAuthenticationChallengeSender协议。NSURLAuthenticationChallenge实例被用于NSURLProtocol的子类来告诉URL加载系统需要认证。他们同样为NSURLConnection和NSURLDownload的代理方法提供了便利的自定义认证处理。</li>
</ol>


<h2>缓存管理</h2>

<p>URL加载系统提供基于磁盘和内存的缓存，允许程序减少对网络连接的依赖，并提供对缓存响应的快速访问。缓存存储在每个app的缓存文件夹下。NSURLConnection会根据缓存策略（初始化NSURLRequest对象中指定的）来查询缓存。</p>

<p>NSURLCache提供了配置缓存大小和磁盘存储位置的方法。同时提供了包含缓存响应的NSCacheURLResponse对象集合的方法。NSCacheURLResponse对象封装了NSURLResponse对象和URL数据，同时提供用户信息字典，这些信息可以用于缓存任何用户数据。</p>

<p>不是所有的协议实现都支持响应缓存。当前只有http和https请求可被缓存。</p>

<p>一个NSURLConnection对象可以通过connection:willCacheResponse:代理访求来控制是否缓存响应，响应是否只应该存储在内存中。</p>

<h2>Cookie存储</h2>

<p>由于HTTP协议是无状态的，所以客户端通常使用cookie来保存URL请求的数据。URL加载系统提供了接口来创建和管理cookie，将cookie作为HTTP请求的一部分来发送，及解析web服务端响应数据时接收cookie.</p>

<p>iOS提供了NSHTTPCookieStorage类来管理一个NSHTTPCookie对象的集合。</p>

<h2>协议支持</h2>

<p>URL加载系统默认支持http, https, file, ftp, data协议。另外，URL加载系统也允许我们注册自己的类来支持额外的系统层级的网络协议。我们也可以添加指定协议的属性到URL请求和URL响应对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[混合使用Swift和Objective-C]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/08/mix-swift-and-objective-c/"/>
    <updated>2014-07-08T16:58:06+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/08/mix-swift-and-objective-c</id>
    <content type="html"><![CDATA[<p>Swift和Objective-C可以在同一个工程中共存。不管创建工程时选择的是Swift还是Objective-C作为初始语言，我们都可以在工程中添加另一种语言的文件。</p>

<p>混合编程的处理过程在App工程和库工程中稍微有点不同。具体的工作模型如下图所示</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/Art/DAG_2x.png" alt="image" /></p>

<p>下面我们讨论下具体的操作</p>

<h2>同一App工程中导入代码</h2>

<h4>在Swift工程中导入Objective-C</h4>

<p>如果我们需要在一个Swift工程中导入Objective-C代码，需要依托于Objective-C Bridging header(桥接头文件)。在Swift工程中，当我们添加一个Objective-C文件时，如果工程中没有现存的Bridging header文件，则XCode会提示我们是否创建该文件。如果我们点击Yes，则XCode会自动创建头文件，并命名为&#8221;工程名-Bridging-Header.h&#8221;。</p>

<p>我们需要编辑这个文件，以导入我们的Objective-C代码。</p>

<p>如果是从同一个target中导入Objective-C代码，则我们需要做如下操作</p>

<ol>
<li><p>在Bridging header文件中，import所有需要在Swift中使用的头文件</p>

<p> #import &ldquo;XYZCustomCell.h&rdquo;</p>

<p> #import &ldquo;XYZCustomView.h&rdquo;</p>

<p> #import &ldquo;XYZCustomViewController.h&rdquo;</p></li>
<li><p>在Build Settings中，确保Swift Compiler Code Generation->Objective-C Bridging Header下的头文件的路径是对的。路径必须直接指向文件本身，而不是文件所在的文件夹。</p></li>
</ol>


<p>所有在Bridging header中的公有Objective-C头文件在Swift都是可见的，并且其中的所有功能在所有Swift中都是可用的，而不需要任何导入处理。可以像使用Swift代码一样使用Objective-C代码。如下所示</p>

<pre><code>let myCell = XYZCustomCell()
myCell.subtitle = "A custom cell"
</code></pre>

<h4>在Objective-C中导入Swift</h4>

<p>如果我们要在一个Objective-C工程中导入Swift，则需要依托于XCode-generated header文件。这个自动生成的文件是一个Objective-C头文件，其声明了在我们的target中使用的所有Swift接口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift对C指针实现浅析]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/06/ios-swift-cpointer-2/"/>
    <updated>2014-07-06T13:23:29+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/06/ios-swift-cpointer-2</id>
    <content type="html"><![CDATA[<p>个人认为，Swift对指针的处理略显复杂。</p>

<p>我们通过调试可以看到存在这样一个类型Builtin.RawPointer，我们可以假设其为C指针在Swife中的内部表示，但不可以直接使用。相反，在Swift中，定义了7种指针类型，可以通过这7种类型来操作C指针。</p>

<h2>COpaquePointer</h2>

<p>在C语言中，常使用typedef来定义一些指针类型的别名，如</p>

<pre><code>typedef struct stack *stack_t
</code></pre>

<p>该定义表示一个指向栈结构的指针，但并没有给出结构的任何信息，我们不知道该结构都有哪些成员。类似于stack_t这样的指针就是一个不透明的指针。在程序中，我们可以自由的操纵这种指针，但无法反引用以获取指针的内部信息，只有接口的实现才有这种特权。这所以使用不透明指针，在于其隐藏了具体的实现细节，有助于捕获错误。即只能传相同的参数给函数，否则将产一变异错误。(参看《C语言接口与实现：创建可重用软件的技术》)</p>

<p>在Swift中，针对这种不透明指针，定义了一个包装器：COpaquePointer。该类型（实际为结构体）是一个不透明指针的包装器，主要用于Bridge Header中表示C中的复杂结构指针，当我们的指针指向的类型无法在Swift中有效地表示出来时，就可以使用该类型，而如果在Swift能找到对应的类型表示指针指向的类型，则可以使用UnsafePointer。</p>

<p>该类的实现及其扩展实现了四个协议，我们看看其具体代码</p>

<pre><code>struct COpaquePointer : Equatable, Hashable, LogicValue {
    init()
    static func null() -&gt; COpaquePointer
    func getLogicValue() -&gt; Bool
    var hashValue: Int { get }
}

extension COpaquePointer {

    /// 将UnsafePointer类型转换为不透明C指针
    init&lt;T&gt;(_ from: UnsafePointer&lt;T&gt;)
}

extension COpaquePointer : CVarArg {
    func encode() -&gt; Word[]
}
</code></pre>

<p>可以看到该结构体并没有做太多的事情，仅仅实现了四个协议的接口，同时做了个UnsafePointer类型的转换操作。该类型在Swift使用得比较多，例如在NSData中，bytes属性的类型就是COpaquePointer，而该属性在Objective-C中的类型是const void*。</p>

<h2>UnsafePointer</h2>

<p>UnsafePointer一个泛型结构体，可以说是处理C指针最主要的结构体了。它包装并存储了类型为T的C指针，主要用于与C标准库交互。该类没有提供自动管理内存功能，所以我们在使用的时候需要注意内存的分配与释放。当在Swift能找到与T类型相对应的类型时，可以使用该类型，否则就考虑使用COpaquePointer。</p>

<p>在该类型的声明中，我们可以看到它定义了大量的方法来处理指针，具体如下</p>

<pre><code>struct UnsafePointer&lt;T&gt; : BidirectionalIndex, Comparable, Hashable, LogicValue {    
    /// 构造一个空指针
    init()

    /// 将一个不透明指针转换为类型指定的C指针，注意这种转换是不安全的
    init(_ other: COpaquePointer)

    /// 从给定的内存地址中构造一个UnsafePointer。注意这种转换是不安全的
    init(_ value: Int)

    /// 从一个不同类型的指针中转换。注意这种转换是不安全的
    init&lt;U&gt;(_ from: UnsafePointer&lt;U&gt;)
    static func null() -&gt; UnsafePointer&lt;T&gt;
    static func alloc(num: Int) -&gt; UnsafePointer&lt;T&gt;
    func dealloc(num: Int)

    /// 访问底层原始内存，获取并设置其值
    var memory: T

    /// 初始化指针指向的值，用于构造一个事先未存储对象的对象
    func initialize(newvalue: T)

    /// 获取指针指向的值，并将其从内存引用的位置移除。
    /// 后置条件：值被销毁，且内存在再次使用前必须被初始化
    func move() -&gt; T

    /// 将起始于source处的count个值赋值给未初始化的内存，将原始值转换到原始内存中，并且
    /// 是从最后开始处理，一直到第一个。使用该方法将值拷贝到可能与原范围重叠的内存区域
    /// 这要求source的位置先于self或者在self+count之后
    func moveInitializeBackwardFrom(source: UnsafePointer&lt;T&gt;, count: Int)

    /// Assign from count values beginning at source into initialized
    /// memory, transforming the source values into raw memory.
    /// 将起始于source处的count个值赋值给已初始化的内存，将原始值转换到原始内存中
    func moveAssignFrom(source: UnsafePointer&lt;T&gt;, count: Int)

    /// 拷贝起始于source的count个值到内存中，将源值转换到内存中
    func moveInitializeFrom(source: UnsafePointer&lt;T&gt;, count: Int)

    /// 拷贝起始于source的count个值到内存中
    func initializeFrom(source: UnsafePointer&lt;T&gt;, count: Int)

    /// 拷贝C元素到内存中
    func initializeFrom&lt;C : Collection where T == T&gt;(source: C)

    /// 销毁指针指向的对象
    func destroy()

    /// 销毁指针指向的count个对象
    func destroy(count: Int)
    func getLogicValue() -&gt; Bool
    subscript (i: Int) -&gt; T
    var hashValue: Int { get }
    func succ() -&gt; UnsafePointer&lt;T&gt;
    func pred() -&gt; UnsafePointer&lt;T&gt;

    /// 以下是将其它类型的指针转换化UnsafePoint的构造器
    init(_ cp: CConstPointer&lt;T&gt;)
    init(_ cm: CMutablePointer&lt;T&gt;)
    init(_ op: AutoreleasingUnsafePointer&lt;T&gt;)
    init(_ cp: CConstVoidPointer)
    init(_ cp: CMutableVoidPointer)
}

extension UnsafePointer&lt;T&gt; : Printable {
    var description: String { get }
}
</code></pre>

<p>UnsafePointer提供了多个构造器，以从其它指针类型创建一个UnsafePointer。另外，CMutablePointer、CMutableVoidPointer、CConstPointer、CConstVoidPointer都提供了一个withUnsafePointer方法，该方法是让这些指针类型在一个闭包中可以像UnsafePointer类型一样使用。我们来看一个例子：</p>

<pre><code>func StringFromCptr(inChars:CMutablePointer&lt;CChar&gt;) -&gt; String {

    var ptr:UnsafePointer&lt;UInt8&gt; = UnsafePointer&lt;UInt8&gt;(0)
    inChars.withUnsafePointer({ p in ptr = UnsafePointer&lt;UInt8&gt;(p) })

    var str = CString(ptr)

    return NSString(CString:str)
}

var Len = 10
var Str = CChar[](count:Len, repeatedValue:CChar(0))

for var i = 0; i &lt; Len; i++ {
    Str[i] = CChar(i + 65)
}

var Result = StringFromCptr(&amp;Str)

println("\(Result)")

// 输出：ABCDEFGHIJ
</code></pre>

<p>目前感觉在通常情况下，UnsafePointer使用得不多，平时接触到的更多的是CMutablePointer、CMutableVoidPointer、CConstPointer、CConstVoidPointer、AutoreleasingUnsafePointer这五种指针类型，这五种指针的基本使用方法我们在<a href="http://southpeak.github.io/blog/2014/07/02/ios-swift-cpointer/">Swift中C指针的基本使用方法</a>有简单介绍过，下面我们也讲讲它们的基本实现。</p>

<h2>AutoreleasingUnsafePointer</h2>

<p>该类型的基本定义是一个指向Objective-C指针的可变指针。这个类型有几种隐式转换来允许传递下面几种参数类型给一个一个C或ObjC API：</p>

<ol>
<li>nil, 作为null指针传入</li>
<li>被引用类型的in-out参数，作为一个带有自动释放所有权语义的可回写变量的指针传递</li>
<li>UnsafePointer<T></li>
</ol>


<p>与CMutablePointer不同的是，Swift不直接支持传递一个指向元素是Objc类指针数组的指针。与UnsafePointer<T>不同的是，AutoreleasingUnsafePointer必须引用一个存储，该存储没有其引用值的引用计数。相反，UnsafePointer的操作假设引用的存储拥有其加载的值且可以对其进行修改。</p>

<p>该类型不像其它的C*Pointer类型一样携带一个所有者指针，因为它只需要引用in-out参数转换的结果，而这个参数已经有一个回写域的生命周期了。</p>

<p>我们来看看其声明：</p>

<pre><code>struct AutoreleasingUnsafePointer&lt;T&gt; : Equatable, LogicValue {
    func getLogicValue() -&gt; Bool

    /// Access the underlying raw memory, getting and
    /// setting values.
    var memory: T
}
</code></pre>

<h2>CConstPointer与CConstVoidPointer</h2>

<p>这两个类型都是C常量指针，分别对应于C中的const T<em>和const </em>void。它们没有自己的操作。它的值由owner-value对组成，也正因此，它不能直接传递给C函数。在桥接的过程中，它会维护一个owner的强引用，且指针值被传递到C或者Objective-C的入口点。这允许拥有堆存储的类型(如数组)将自己转换为一个指针，同时仍保证在调用的过程中仍然维护它们的存储。我们可以看下它们的具体实现</p>

<pre><code>struct CConstPointer&lt;T&gt; : Equatable {
    let owner: AnyObject?

    /// True if this is a scoped pointer, meaning it has a owner reference
    /// that guarantees the lifetime of the referenced memory.
    var scoped: Bool { get }

    /// Make the pointer available as an UnsafePointer within a closure.
    func withUnsafePointer&lt;U&gt;(f: UnsafePointer&lt;T&gt; -&gt; U) -&gt; U
}

struct CConstVoidPointer : Equatable {
    let owner: AnyObject?

    /// True if this is a scoped pointer, meaning it has a owner reference
    /// that guarantees the lifetime of the referenced memory.
    var scoped: Bool { get }

    /// Make the pointer available as an UnsafePointer within a closure.
    func withUnsafePointer&lt;T, U&gt;(f: UnsafePointer&lt;T&gt; -&gt; U) -&gt; U
}
</code></pre>

<h2>CMutablePointer与CMutableVoidPointer</h2>

<p>这两个类型都是C可变指针，分别对应于C中的T <em>和void </em>，其基本内容同上。</p>

<h2>总结</h2>

<p>由上面的分析，依据类型是否可以直接用于C函数声明，可以将这7种指针类型分为两类：</p>

<ol>
<li>可直接用于C函数声明：COpaquePointer,UnsafePointer<T>,AutoreleasingUnsafePointer<T>，它们是对Builtin.RawPointer的封装，直接对应于C指针，其sizeof是单位字长</li>
<li>不可直接用于C函数声明：CMutablePointer<T>, CConstPointer<T>, CMutableVoidPointer, CConstVoidPointer。这几个类型都有一个owner属性用于管理实例的生命周期，可以直接从Swift对象的引用获得，另外还可以使用withUnsafePointer方法，该方法是让这些指针类型在一个闭包中可以像UnsafePointer类型一样使用。</li>
</ol>


<p>另外有两点需要注意</p>

<ol>
<li>非常量指针都实现了LogicValue协议，因此可以直接使用if a_pointer来判断其是否为NULL。</li>
<li>nil类型实现了到所有指针类型的隐式类型转换，等价于C中的NULL，可以直接判断。</li>
</ol>


<p>至于这些指针的使用，需要在根据实现情况来具体处理。</p>

<p>参考：</p>

<ol>
<li>《C语言接口与实现：创建可重用软件的技术》</li>
<li><a href="http://stackoverflow.com/questions/24089052/swift-string-to-cmutablepointercchar">Swift.String to CMutablePointer<CChar></a></li>
<li><a href="http://andelf.github.io/blog/2014/06/18/swift-and-c-interop-cont/">Swift and C Interop Cont. (简析 Swift 和 C 的交互，Part 二)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cover flow基本原理及Tapku实现方法]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/05/cover-flow/"/>
    <updated>2014-07-05T17:51:43+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/05/cover-flow</id>
    <content type="html"><![CDATA[<p>这篇是两年前在CocoaChina上写的(德鲁伊)，现在把它归集到这边来。大家也可以查看<a href="http://www.cocoachina.com/bbs/read.php?tid=75699">原文</a>。</p>

<p>Cover flow是苹果首创的将多首歌曲的封面以3D界面的形式显示出来的方式。如下图所示：</p>

<p><img src="http://cc.cocimg.com/bbs/attachment/Fid_6/6_38018_be3432a30663e7e.png" alt="image" /></p>

<p>从图中可以看到，显示在中间的图片为目标图片，两侧的图片在y轴都旋转了一定的角度，并且每两张图片之间都保持了一定的距离。在交互（如点击两侧的图片）的时候，滑动到中间的图片会逐渐放大，旋转的角度由原来的旋转角度a变为0，且位置上移动中间，变成新的目标图片；同时原处于中间位置的图片则缩小、旋转一定的角度、位置偏移到一侧。所以在整个过程中，主要有两个属性发生了变化：角度与位置(缩放只是视觉上的，并没有进行缩放操作)。</p>

<p>在每次点击一张图片时，如果这张图片在目标图片的左边，则所有的图片都会向右移动，同时做相应的旋转；相反，点击目标图片右侧的图片时，所有图片都会向左移动并做相应的旋转。</p>

<p>从如上描述的效果，可以看出在Cover Flow中最主要的的操作有两个：3D仿射变换与动画。仿射变换实质上是一种线性变换，通常主要用到的仿射变换有平移(Translation)、旋转(Rotation)、缩放(Scale)。
对于这两种操作，iOS都提供了非常简便的接口来实现。接下来我们便以tapku的实现方法为例，来说明实现Cover Flow的基本过程。</p>

<h2>一、图片的布局</h2>

<p>从效果图可以看出，图片是按一条直接排列，图片与图片之间有一定的间距，目标图片是正向显示，两侧的图片则按一定的角度进行了旋转，与目标图片形成一定的角度。同时我们还能看到每个图片都有一个倒影，并且这个倒影是渐变的，由上而下逐渐透明度逐渐减小。</p>

<h4>1、 Cover Flow单元的定义</h4>

<p>在tapku中，每一个图片附属于一个视图(TKCoverflowCoverView)，这个视图相当于UITableViewCell，它包含了三个要素：图片(imageView)，倒影图片(reflected)，渐变层(gradientLayer)。渐变层覆盖于倒影图片上，且大小位置一致。</p>

<p>TKCoverflowCoverView的声明及布局代码如下所示：</p>

<pre><code>@interface TKCoverflowCoverView : UIView {
    float baseline;
    UIImageView *imageView;
    UIImageView *reflected;
    CAGradientLayer *gradientLayer;
}
@end

- (id)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        self.opaque = NO;
        self.backgroundColor = [UIColor clearColor];
        self.layer.anchorPoint = CGPointMake(0.5, 0.5);

        imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, self.frame.size.width)];
        [self addSubview:imageView];
        reflected = [[UIImageView alloc] initWithFrame:CGRectMake(0, self.frame.size.width, self.frame.size.width, self.frame.size.width)];
        reflected.transform = CGAffineTransformScale(reflected.transform, 1, -1);
        [self addSubview:reflected];

        gradientLayer = [CAGradientLayer layer];
        gradientLayer.colors = [NSArray arrayWithObjects:(id)[UIColor colorWithWhite:0 alpha:0.5].CGColor,(id)[UIColor colorWithWhite:0 alpha:1].CGColor,nil];
        gradientLayer.startPoint = CGPointMake(0, 0);
        gradientLayer.endPoint = CGPointMake(0, 0.4);
        gradientLayer.frame = CGRectMake(0, self.frame.size.width, self.frame.size.width, self.frame.size.width);
        [self.layer addSublayer:gradientLayer];
    }

    return self;
}
</code></pre>

<p>注意：此次将视图的锚点(anchorPoint属性)设置为(0.5, 0.5)，即视图的中心点，目的是让视图以中心点为基点进行旋转。</p>

<p>在进行仿射变换时，视图作为一个整体进行变换。</p>

<h4>2、图片的布局</h4>

<p>tapku中，图片的布局与交互是在TKCoverflowView类中完成的。类TKCoverflowView继承自UIScrollView，相当于是TableView。</p>

<p>该类中定义是两个仿射变量：</p>

<pre><code>CATransform3D leftTransform, rightTransform
</code></pre>

<p>这两个变量分别设置了两侧图片的仿射变换，具体的设置方法为</p>

<pre><code>- (void) setupTransforms{
    leftTransform = CATransform3DMakeRotation(coverAngle, 0, 1, 0);
    leftTransform = CATransform3DConcat(leftTransform,CATransform3DMakeTranslation(-spaceFromCurrent, 0, -300));
    rightTransform = CATransform3DMakeRotation(-coverAngle, 0, 1, 0);
    rightTransform = CATransform3DConcat(rightTransform,CATransform3DMakeTranslation(spaceFromCurrent, 0, -300));
}
</code></pre>

<p>其中coverAngle为旋转的角度。对每个仿射变量同时设置了旋转也平移变换。</p>

<p>Cover Flow单元是存储在一个数组中：
复制代码
NSMutableArray *coverViews;</p>

<p>初始化时设置数组的大小，并存入空对象。在后期获取某个索引位置的单元时，如果该单元为空，则生成一个新的TKCoverflowCoverView并放入相应位置。</p>

<pre><code>if([coverViews objectAtIndex:cnt] == [NSNull null]){
    TKCoverflowCoverView *cover = [dataSource coverflowView:self coverAtIndex:cnt];
    [coverViews replaceObjectAtIndex:cnt withObject:cover];
    ......
}
</code></pre>

<p>每个Cover Flow单元的位置计算如下</p>

<pre><code>CGRect r = cover.frame;
r.origin.y = currentSize.height / 2 - (coverSize.height/2) - (coverSize.height/16);
r.origin.x = (currentSize.width/2 - (coverSize.width/ 2)) + (coverSpacing) * cnt;
cover.frame = r;
</code></pre>

<p>其中currentSize,coverSize,coverSpacing都是固定值。从中可以看出所有单元的y值都是一样的，而x值则与其在数组中的索引值相关，索引越大，x值也越大。而这就涉及我们之后的一个问题。一会再讲。
假定目标图片的索引为currentIndex，则目标图片两侧的仿射属性设置如下：</p>

<pre><code>if(cnt &gt; currentIndex){
    cover.layer.transform = rightTransform;
}
else
    cover.layer.transform = leftTransform;
</code></pre>

<p>如上即为Cover Flow的基本布局，可以与UITableView比较一下。</p>

<h2>二、交互</h2>

<p>Cover Flow的基本交互是点击两侧的图片，则被点击的图片成为新的目标图片并移动中屏幕中间，而其它图片一起移动，在这个过程中所需要做的就两件事：旋转与平移。</p>

<p>方法很简单：在动画块中重新设置Cover Flow单元的transform属性，这样就可以缓动实现这个动画的过程。实际上只有新旧目标图片及中间的图片需要做这种变换，其余图片的transform属性都是不变的。</p>

<pre><code>float speed = 0.3;
[UIView beginAnimations:string context:nil];
[UIView setAnimationDuration:speed];
[UIView setAnimationCurve:UIViewAnimationCurveEaseOut];
[UIView setAnimationBeginsFromCurrentState:YES];
[UIView setAnimationDelegate:self];
[UIView setAnimationDidStopSelector:@selector(animationDidStop:finished:context:)]; 
for(UIView *v in views){
int i = [coverViews indexOfObject:v];
    if(i &lt; index) v.layer.transform = leftTransform;
    else if(i &gt; index) v.layer.transform = rightTransform;
    else v.layer.transform = CATransform3DIdentity;
}
[UIView commitAnimations];
</code></pre>

<p>但这在做的只是旋转了Cover Flow的内容，并没有对Cover Flow进行水平平移，Cover Flow水平位置已由其origin.x值固定。那么水平上的平移是如何实现的呢，我们看下面的代码：</p>

<pre><code>- (void) snapToAlbum:(BOOL)animated{
    UIView *v = [coverViews objectAtIndex:currentIndex];
    if((NSObject*)v!=[NSNull null]){
        [self setContentOffset:CGPointMake(v.center.x - (currentSize.width/2), 0) animated:animated];
    }
    else
    {  
        [self setContentOffset:CGPointMake(coverSpacing*currentIndex, 0) animated:animated];
    }
}
</code></pre>

<p>其所做的就是以目标图片为中心，整体平移TKCoverflowView视图。</p>

<h2>三、总结</h2>

<p>由上可以看出，Cover Flow特效的原理很简单：对新旧目标图片及中间的图片以动画的形式做仿射变换。至于仿射变换如何处理，有不同的方法。tapku所实现的方法可以说相对简单灵活。</p>

<p>Android, Flash都有类似的Cover Flow特效实现方法，有兴趣的童鞋可以参考一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中C指针的基本使用方法]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/02/ios-swift-cpointer/"/>
    <updated>2014-07-02T20:51:30+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/02/ios-swift-cpointer</id>
    <content type="html"><![CDATA[<p>Swift尽可能避免让我们直接去访问指针。但当我们需要直接访问内存时，我们可以使用Swift提供的几种指针类型。在下面几个表中列出了各种情况下C类型指针语法与Swift语法对应关系，其中Type作为实际类型的占位符</p>

<p>对于函数参数，有以下对应关系</p>

<table>
<thead>
<tr>
<th></th>
<th>    C语法    </th>
<th>   Swift语法   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> const void * </td>
<td>  CConstVoidPointer |</td>
</tr>
<tr>
<td></td>
<td>  void *  </td>
<td>  CMutableVoidPointer |</td>
</tr>
<tr>
<td></td>
<td>const Type * </td>
<td> CConstPointer<Type> |</td>
</tr>
<tr>
<td></td>
<td>Type *</td>
<td>CMutablePointer<Type>|</td>
</tr>
</tbody>
</table>


<p>对于返回值，变量，二级以上的指针参数，有以下对应关系</p>

<table>
<thead>
<tr>
<th></th>
<th>    C语法    </th>
<th>   Swift语法   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>void * </td>
<td> COpaquePointer|</td>
</tr>
<tr>
<td></td>
<td>Type * </td>
<td> UnsafePointer<Type>|</td>
</tr>
</tbody>
</table>


<p>对于类类型，有以下对应关系</p>

<table>
<thead>
<tr>
<th></th>
<th>    C语法    </th>
<th>   Swift语法   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>Type * const * </td>
<td> CConstPointer<Type> |</td>
</tr>
<tr>
<td></td>
<td>Type * __strong * </td>
<td> CMutablePointer<Type> |</td>
</tr>
<tr>
<td></td>
<td>Type ** </td>
<td> AutoreleasingUnsafePointer<Type>|</td>
</tr>
</tbody>
</table>


<p>下面简单介绍一下这几种类型的指针</p>

<h2>C可变指针</h2>

<p>当我们声明一个包含CMutablePointer<Type>参数的指针时，可以接收以下类型的值</p>

<ol>
<li>nil, 作为空指针传入</li>
<li>一个CMutablePointer<Type>值</li>
<li>一个in-out表达式，它的操作数是Type类型的左值。该表达式作为左值地址传入</li>
<li>一个in-out Type[]值，它作为数组的首地址指针传入，且在调用时扩展了数据的生命周期</li>
</ol>


<p>假如我们声明了如下一个函数：</p>

<pre><code>func takesAMutablePointer(x: CMutablePointer&lt;Float&gt;) { /*...*/ }
</code></pre>

<p>那么我们可以用以下任何一种方式来调用</p>

<pre><code>var x: Float = 0.0
var p: CMutablePointer&lt;Float&gt; = &amp;x
var a: Float[] = [1.0, 2.0, 3.0]

takesAMutablePointer(nil)
takesAMutablePointer(p)
takesAMutablePointer(&amp;x)
takesAMutablePointer(&amp;a)
</code></pre>

<p>当声明一个包含CMutableVoidPointer参数的函数时，它可以接收与CMutablePointer<Type>相同的形参，其中Type为任意类型。需要注意的是如果直接传递CMutablePointer<Type>，目前的编译器会直接报编译错误</p>

<pre><code>func takesAMutableVoidPointer(x: CMutableVoidPointer) { /* ... */ }

var x: Float = 0.0, y: Int = 0
var p: CMutablePointer&lt;Float&gt; = &amp;x, q: CMutablePointer&lt;Int&gt; = &amp;y
var a: Float[] = [1.0, 2.0, 3.0], b: Int[] = [1, 2, 3]

takesAMutableVoidPointer(nil)
//takesAMutableVoidPointer(p)   编辑错误:CMutablePointer&lt;Float&gt; is not convertible to CMutableVoidPointer
//takesAMutableVoidPointer(q)
takesAMutableVoidPointer(&amp;x)
takesAMutableVoidPointer(&amp;y)
takesAMutableVoidPointer(&amp;a)
takesAMutableVoidPointer(&amp;b)
</code></pre>

<h2>C常量指针</h2>

<p>当我们声明一个带有CConstPointer<Type>参数的函数时，可以接收以下类型的值：</p>

<ol>
<li>nil, 作为空指针传入</li>
<li>一个CMutablePointer<Type>, CMutableVoidPointer, CConstPointer<Type>, CConstVoidPointer, 或者AutoreleasingUnsafePointer<Type>类型的值，如果需要则会转换成CConstPointer<Type></li>
<li>一个in-out表达式，它的操作数是Type类型的左值。该表达式作为左值地址传入</li>
<li>一个in-out Type[]值，它作为数组的首地址指针传入，且在调用时扩展了数据的生命周期</li>
</ol>


<p>假如我们声明如下函数:</p>

<pre><code>func takesAConstPointer(x: CConstPointer&lt;Float&gt;) { /*...*/ }
</code></pre>

<p>那么我们可以用以下任何一种方式来调用</p>

<pre><code>var x: Float = 0.0
var p: CConstPointer&lt;Float&gt; = nil

takesAConstPointer(nil)
takesAConstPointer(p)
takesAConstPointer(&amp;x)
takesAConstPointer([1.0, 2.0, 3.0])
</code></pre>

<p>当声明一个包含CConstVoidPointer参数的函数时，它可以接收与CConstPointer<Type>相同的形参，其中Type为任意类型。</p>

<pre><code>func takesAConstVoidPointer(x: CConstVoidPointer) { /* ... */ }

var x: Float = 0.0, y: Int = 0
var p:CConstPointer&lt;Float&gt; = nil, q: CConstPointer&lt;Int&gt; = nil

takesAConstVoidPointer(nil)
//takesAConstVoidPointer(p)
//takesAConstVoidPointer(q)
takesAConstVoidPointer(&amp;x)
takesAConstVoidPointer(&amp;y)
takesAConstVoidPointer([1.0, 2.0, 3.0])
takesAConstVoidPointer([1, 2, 3])
</code></pre>

<h2>AutoreleasingUnsafePointer</h2>

<p>当我们声明一个带有AutoreleasingUnsafePointer参数的函数时，可以接收以下类型的值：</p>

<ol>
<li>nil, 作为空指针传入</li>
<li>一个AutoreleasingUnsafePointer<Type>值</li>
<li>一个in-out表达式，其操作数是临时非所属(nonowning)缓冲区，存储了原始值的拷贝。缓冲区的地址被传递给调用函数，且在返回时，缓冲区的值被加载(loaded)、保留(retained)并重新指派(reassigned)给操作数</li>
</ol>


<p>注意上面清单中不包含数组</p>

<p>如果我们声明了以下函数</p>

<pre><code>func takesAnAutoreleasingUnsafePointer(x: AutoreleasingUnsafePointer&lt;NSDate?&gt;) { /*...*/ }
</code></pre>

<p>则可以用以下方式来调用</p>

<pre><code>var x: NSDate? = nil
var p: AutoreleasingUnsafePointer&lt;NSDate?&gt; = nil

takesAnAutoreleasingUnsafePointer(nil)
takesAnAutoreleasingUnsafePointer(p)
takesAnAutoreleasingUnsafePointer(&amp;x)
</code></pre>

<p>最后需要注意的是在Swift中，没有导入C函数指针</p>

<p>参考文档：<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html">Using Swift with Cocoa and Objective-C</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift协议基础]]></title>
    <link href="http://southpeak.github.io/blog/2014/07/02/ios-swift-protocol/"/>
    <updated>2014-07-02T14:09:11+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/07/02/ios-swift-protocol</id>
    <content type="html"><![CDATA[<p>Swift的Protocol(协议)与Objective-C的协议一样，用于定义一系列的特定任务和功能的集合。Protocol自身并不提供这些任务的实现，只是描述实现看起来应该是什么样的。类、结构体或枚举可以实现一个Protocol，并提供Protocol中任务和功能的具体实现。Protocol可以要求这些实现类型有指定的实例属性、实例方法、类型方法、操作符和下标等。</p>

<p>Protocol的语法如下所示:</p>

<pre><code>protocol SomeProtocol {
    // 协议定义
}
</code></pre>

<p>类、结构体、枚举可以同时实现多个Protocol，如下所示:</p>

<pre><code>struct SomeStructure: SomeProtocol, AnotherProcotol {
    // 协议定义
}
</code></pre>

<p>需要注意的是，子类在实现Protocol时，需要把父类写在前面，后面再跟上Protocol列表。</p>

<p>我们下面介绍Protocol可以定义的一些功能需求</p>

<h2>属性</h2>

<p>Protocol可以要求实现类型提供指定名称和类型的实例属性或类型属性。Protocol不指定属性是存储属性还是计算属性，它只定义属性名和类型。Protocol也可以指定每个属性是只读的还是可读写的。</p>

<p>如果Protocol要求属性是可读写的，那么这个属性不能是常量存储属性或者只读的计算属性；如果Protocol只是要求属性是可读的，则这个属性可以是任何类型的属性，这种情况下我们的实现代码同样可以指定属性为可写的。通常情况下，在Protocol中属性一般定义为变量，具体语法如下所示：</p>

<pre><code>protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
    class var someTypeProperty: Int { get set }
}
</code></pre>

<p>如果是类型属性，我们需要在前面加上class，即便是结构体可枚举来实现这个Protocol，也是一样。如上面代码所示。</p>

<p>代码清单1是一个详细的例子，定义了一个协议FullyNamed，其中声明了fullName属性，而在其两个个体的实现类型中，将fullName实现为不同的属性类型</p>

<h6>代码清单1</h6>

<pre><code>protocol FullyNamed {
    var fullName: String { get }
}

struct Person: FullyNamed {
    var fullName: String        // 可读写存储属性
}

class Sharship: FullyNamed {

    var prefix: String?
    var name: String?

    var fullName: String {      // 只读的计算属性
    return (prefix ? prefix! + " " : "") + name
    }
}
</code></pre>

<h2>方法</h2>

<p>在Protocol中声明方法与在类中定义类似，只是没有实现体。另外声明方法是使用可变参数也是可以的，唯一的不同是在Protocol的方法声明中不能指定默认值。</p>

<p>与属性声明一样，如果是类型方法，需要加上class前缀。方法的声明及实现类型的实现如代码清单2所示：</p>

<pre><code>protocol RandomNumberGenerator {
    func random() -&gt; Double
}


class LinearCongruentialGenerator: RandomNumberGenerator {
    var lastRandom = 42.0
    let m = 139968.0
    let a = 3877.0
    let c = 29573.0
    func random() -&gt; Double {
        lastRandom = ((lastRandom * a + c) % m)
        return lastRandom / m
    }
}
let generator = LinearCongruentialGenerator()

generator.random()      // 0.37464991998171
</code></pre>

<p>另外，如果我们需要在方法中修改实例，则在方法前添加mutating关键字，与结构体中方法的定义是一样的。需要注意的是，只有在结构体和枚举的实现中才需要加mutating，类的实现是不需要的。</p>

<h2>该Protocol做为类型</h2>

<p>Protocol可以作为一种类型在代码中使用。因为它是一种类型，所以在很多情况下都可以使用，包括</p>

<ol>
<li>作为函数、方法、初始化方法的参数或返回值</li>
<li>作为常量、变量或属性的类型</li>
<li>作为数组、字典或其它容器的元素</li>
</ol>


<p>基于此，Protocol也可以放入集合中，如数组、字典等。</p>

<p>下面是将Protocol作为类型的例子</p>

<pre><code>class Dice {
    let sides: Int
    let generator: RandomNumberGenerator
    init (sides: Int, generator: RandomNumberGenerator) {
        self.sides = sides
        self.generator = generator
    }

    func roll() -&gt; Int {
        return Int(generator.random() * Double(sides)) + 1
    }
}

// 具体使用
var dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
</code></pre>

<h2>代理(Delegation)</h2>

<p>Swift与Objective-C的代理一样，允许将一个类或结构体的一些处理放到另外一个类型中(代理类)。Swift中代理模式的实现就是通过定义一个Protocol来封装代理方法，然后具体的实现类来实现这些代理方法。代理可以用于响应特定的行为，或者从外部资源获取数据，而不需要知道这些资源的类型。</p>

<p>如下是一个实现UITableView代理的简单例子</p>

<pre><code>class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {

    var tableView: UITableView?

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.

        tableView = UITableView(frame: self.view.bounds, style: UITableViewStyle.Plain)
        tableView!.delegate = self
        tableView!.dataSource = self
    }

    // 实现UITableViewDataSource

    func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -&gt; Int {
        return 20
    }

    func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! {
        return nil
    }
}
</code></pre>

<h2>在扩展中实现Protocol</h2>

<p>如果我们想让某个已存在的类型(我们没有源码的情况下)实现某个Protocol，则可以借助扩展。当类型的扩展实现了Protocol时，该类会自动实现Protocol(听着有点绕口)。但如果类型已经实现了Protocol的所有必须的方法(类型未采用Protocol)，这种情况下，若想让类型采用Protocol，则可以使用一个空的扩展来声明类型采用Protocol。如下代码所示：</p>

<pre><code>protocol TextRepresentable {
    func asText() -&gt; String
}

struct Hamster {
    var name: String
    func asText() -&gt; String {
        return "A Hamster"
    }
}

extension Hamster : TextRepresentable {}
</code></pre>

<h2>Protocol继承</h2>

<p>一个Protocol可以继承自一个或多个Protocol，并在自己的实现中添加更多的功能需求。Protocol继承的语法与类型继承是一样的，其语法如下所示：</p>

<pre><code>protocol InheritingProtocol : SomeProtocol, AnotherProtocol {

}
</code></pre>

<p>在上面的例子中，所有实现子InheritingProtocol的类型都必须实现InheritingProtocol、SomeProtocol、AnotherProtocol三者中所有的必要功能。</p>

<h2>Protocol组合</h2>

<p>让一个类型同时实现多个Protocol是很有用的。这种情况下，我们可以使用Protocol组合来将多个Protocol组合成一个整体。其语法如下所示：</p>

<pre><code>protocol&lt;SomeProtocol, AnotherProtocol&gt;
</code></pre>

<p>我们可以将多个Protocol放在&lt;>中，在使用时，我们将其当成一个整体来处理，这种组合的实际含义是：任何同时实现&lt;>所有Protocol的类型。让我们看看下面的例子：</p>

<pre><code>protocol P1 {
    var variable1 : String { get }
}

protocol P2 {
    var variable2 : Int { get }
}

struct MyStruct : P1, P2 {
    var variable1: String
    var variable2: Int
}

func funcWithProtocols(protocols: protocol&lt;P1, P2&gt;) {

}

let st = MyStruct(variable1: "v", variable2: 2)

funcWithProtocols(st)
</code></pre>

<p>需要注意的是，Protocol组合并没有定义一个新的永久的Protocol类型，它仅仅是定义了一个临时的本地Protocol，该Protocol包含了组合中所有的功能。</p>

<h2>检查Protocol的一致性</h2>

<p>我们可以使用is操作符来检查Protocol的一致性，用as操作符来作Protocol转换。</p>

<ol>
<li>如果is操作符返回true，则一个实例实现了protocol，否则没有</li>
<li>as?操作符返回protocol类型的可选值，如果实例没有实现protocol，则返回nil</li>
<li>as操作符强制作类型转换，如果实例没有实现protocol，则引发一个错误</li>
</ol>


<p>需要注意的是，只有当protocol使用@objc属性标记时，才可以检查其一致性。@objc属性表明protocol应该暴露给Objective-C代码。但即使我们的代码不与Objective-C交互，如果需要对protocol进行一致性检测，也需要使用这个属性。另外@objc标明的protocol只能被类实现，而不能被结构体或枚举实现。</p>

<p>我们举个具体的例子：</p>

<pre><code>@objc protocol HasArea {
    var area: Double { get }
}

class Circle: HasArea {
    let pi = 3.1415927
    var radius: Double
    var area: Double { return pi * radius * radius }
    init(radius: Double) { self.radius = radius }
}

class Country: HasArea {
    var area: Double
    init(area: Double) { self.area = area }
}

class Animal {
    var legs: Int
    init(legs: Int) { self.legs = legs }
}

let objects: AnyObject[] = [
    Circle(radius: 2.0),
    Country(area: 243_610),
    Animal(legs: 4)
]

for object : AnyObject in objects {
    if let objectWithArea = object as? HasArea {
        println("Area is \(objectWithArea.area)")
    } else {
        println("Something that doesn't have an area")
    }
}

// Area is 12.5663708
// Area is 243610.0
// Something that doesn't have an area
</code></pre>

<h2>可选需求</h2>

<p>与Objective-C类似，Swift的Protocol可以定义一些可选的需求，这些需求在实现类型中可以选择性的实现。我们使用@optional修饰符来定义这些需求。</p>

<p>一个可选的需求可以通过可选链来实现，这个可选链可以满足当某个类型没有实现所采用的Protocol的可选需求。这种调用的基本语法如下：</p>

<pre><code>someOptionalMethod?(someArgument)
</code></pre>

<p>另外，可选的方法如果有返回值，总是返回一个可选值，以满足可能未被实现的需求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift扩展(Extension)基础]]></title>
    <link href="http://southpeak.github.io/blog/2014/06/27/ios-swift-extension/"/>
    <updated>2014-06-27T20:54:59+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/06/27/ios-swift-extension</id>
    <content type="html"><![CDATA[<p>扩展(Extension)用于为已存在的类、结构体或枚举添加新的功能。它类似于Objecitve-C中的分类，不同的是Swift的扩展没有名字</p>

<p>Swift的扩展可以做以下事情：</p>

<ul>
<li><p> 添加计算属性和静态计算属性</p></li>
<li><p> 定义实例方法和类型方法</p></li>
<li><p> 提供新的初始化方法</p></li>
<li><p> 定义下标操作符</p></li>
<li><p> 定义并使用新的嵌套类型</p></li>
<li><p> 让已存在类型实现一个协议</p></li>
</ul>


<p>在定义类型的扩展后，访扩展中的功能可以用于类型所有已存在的实例中，即使这些实例在扩展之前定义。</p>

<p>我们使用关键字extension来声明一个扩展，一个扩展可以让类型实现一个或多个协议，如代码清单1所示：</p>

<h6>代码清单1：</h6>

<pre><code>extension SomeType: SomeProtocol, AnotherProtocol {
    // implementation of protocol requirement goes here
}
</code></pre>

<p>下面我们分别介绍如何去扩展一个已有类型的各种功能</p>

<h2>计算属性</h2>

<p>扩展可以添加实例计算属性和类型计算属性。如代码清单2所示：</p>

<h6>代码清单2：</h6>

<pre><code>extension Double {
    var km: Double {return self * 1_000.0}
    var m: Double { return self }
    var cm: Double { return self / 100.0 }
    var mm: Double { return self / 1_000.0 }
    var ft: Double { return self / 3.28084 }
}

let onInch = 25.4.mm        // 0.0254
let threeFeet = 3.ft        // 0.914399970739201
</code></pre>

<p>上例扩展了Double，并定义了一些实例计算属性。我们可以将其用于Double的实例，也可以用于Double类型的字面值。</p>

<p>需要注意的是，扩展可以添加新的计算属性，但不能添加存储属性，也不能给已存在的属性添加观察者</p>

<h2>初始化方法</h2>

<p>扩展可以为已存在类型添加新的初始化方法。这可以让我们扩展某一类型以接受我们自定义的类型作为它的初始化方法，或者为现有类型提供额外的初始化方法。</p>

<p>扩展可以为类添加新的便捷初始化方法，但不能添加命名初始化方法(designated initializers)和析构方法，这两者必须由类型的原始实现来提供。</p>

<p>代码清单3定义了Rect类型，并通过扩展为其定义了一个新的初始化方法</p>

<h6>代码清单3</h6>

<pre><code>struct Size {
    var width = 0.0, height = 0.0
}

struct Point {
    var x = 0.0, y = 0.0
}

struct Rect {
    var origin = Point()
    var size = Size()
}

let defaultRect = Rect()
let memeberwiseRect = Rect(origin: Point(x: 1.0, y: 2.0), size: Size(width: 5.0, height: 10.0))

extension Rect {
    init (center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - size.height / 2
        self.init(origin: Point(x: originX, y: originY), size:size)
    }
}

let centerRect = Rect(center: Point(x: 20.0, y: 3.0), size: Size(width: 10.0, height: 40.0))
</code></pre>

<p>需要注意的是，如果我们提供新的初始化方法，仍然需要确保在初始化方法结束前初始化实例的所有常量和变量。</p>

<p>另外，如果我们扩展的类型的所有存储属性都有默认值，而没有定义初始化方法时，我们可以在扩展的初始化方法中调用默认的初始化方法和</p>

<h2>方法</h2>

<p>扩展可以为已存在类型添加新的实例方法和类型方法。对于结构体和枚举类型而言，如果扩展的方法需要修改self或者它的属性的话，需要将实例方法标记为mutating(与结构体和枚举的原始实现相同)。</p>

<h6>代码清单4：演示了扩展方法的定义</h6>

<pre><code>extension Int {
    func repetitions(task: () -&gt; ()) {
        for i in  0..self {
            task()
        }
    }

    mutating func square() {        // mutating
        self = self * self
    }
}

var someInt = 3
someInt.square()
</code></pre>

<h2>下标</h2>

<p>扩展可以为已存在类型添加新的下标。例如我们想为Int类型添加一个下标操作，指定下标为n时，返回数字从右侧起第n个数字，即</p>

<ul>
<li><p> 123456789[0] = 9</p></li>
<li><p> 123456789[1] = 8</p></li>
<li><p> …</p></li>
</ul>


<p>代码清单5给出了相应的实现</p>

<h6>代码清单5</h6>

<pre><code>extension Int {
    subscript(digitIndex: Int) -&gt; Int {
        var decimalBase = 1
            for _ in 1...digitIndex {
                decimalBase * 10
            }
            return (self / decimalBase) % 10
    }
}

8738793219[0]   // 9
8738793219[1]   // 1
8738793219[2]   // 2
8738793219[8]   // 7
</code></pre>

<h2>嵌套类型</h2>

<p>扩展可以为已存在类型添加新的嵌套类型，如代码清单6所示</p>

<h6>代码清单6：</h6>

<pre><code>extension Character {
    enum Kind {
        case Vowel, Consonant, Other
    }

    var kind:Kind {
    switch String(self).lowercaseString {
        case "a", "e", "i", "o", "u":
            return .Vowel
        case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n",
             "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
            return .Consonant
        default:
            return .Other
    }
    }
}
</code></pre>

<p>上面为Character类型添加了一个嵌套枚举，以表示字符的类型。定义之后，嵌套类型就可以用于Character的值了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift属性Property]]></title>
    <link href="http://southpeak.github.io/blog/2014/06/27/ios-swift-property/"/>
    <updated>2014-06-27T20:34:38+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/06/27/ios-swift-property</id>
    <content type="html"><![CDATA[<p>Swift的属性与Objective-C中的属性是一样的，不同的是Swift细化了属性的类型，另外除了类之外，结构体和枚举也可以有属性。</p>

<p>Swift中有这么几种属性：</p>

<ol>
<li>存储属性(Stored properties)：存储实例的常量和变量，与类、结构体、枚举的实例相关</li>
<li>计算属性(Computed properties)：通过某种方式计算出来的属性，只与类、结构体的实例相关，枚举没有计算属性</li>
<li>类型属性(type properties)：与类型自身相关。</li>
</ol>


<p>另外，我们可以定义属性观察者来监听属性值的改变，以执行一些额外的操作。属性观察者可以添加到自定义的存储属性上，也可以添加到父类继承而来的属性上。</p>

<p>下面我们将详细介绍这些属性</p>

<h2>存储属性</h2>

<p>存储属性是最简单的属性，它作为类或结构体实例的一部分，用于存储常量和变量。</p>

<p>关于存储属性，有以下几点：</p>

<ol>
<li>我们可以给存储属性提供一个默认值，也可以在初始化方法中对其进行初始化，即使是常量型属性，也可以这样做。</li>
<li>如果创建一个常量结构体实例，我们不能修改该实例的变量型存储属性。这是因为结构体是值类型，当一个值类型的实例标记为常量时，它的所有属性也是常量。由于类是引用类型，所以该条不适用于类类型。</li>
<li>如果我们希望属性在使用到的时候再初始化，则可以使用懒惰存储属性(lazy stored property，使用修饰符@lazy)。懒惰存储属性总是应该定义为变量，因为常量型属性总需要在初始化方法完成之前初始化。</li>
<li>与Objective-C不同的是，Swift中的属性不需要一个与之对应的成员变量，我们不能直接访问属性的后备存储(backing store)。这种方式避免了混淆不同上下文环境下对值的访问，并将属性简化为单一、明确的声明。</li>
</ol>


<h6>代码清单1：</h6>

<pre><code>struct FixedLengthRange {
    var firstValue:Int      // 变量存储属性
    let length:Int          // 常量存储属性
}

var item1 = FixedLengthRange(firstValue: 10, length: 10)

let item2 = FixedLengthRange(firstValue: 10, length: 10)
//item2.firstValue = 6        // 错误：不能修改常量结构体实例的存储属性
</code></pre>

<h2>计算属性</h2>

<p>计算属性并不存储实际的值，而是提供一个getter和一个可选的setter来间接获取和设置其它属性。</p>

<p>关于计算属性，有以下几点：</p>

<ol>
<li>如果计算属性的setter没有定义一个新值的变量名，则默认为newValue</li>
<li>如果只提供getter，而不提供setter，则该计算属性为只读属性</li>
<li>我们只能声明变量型只读属性，因为它们的值不是固定的</li>
<li>如果计算属性是只读的，则可以不使用get{}</li>
</ol>


<p>计算属性的实例如代码清单2：</p>

<h6>代码清单2：</h6>

<pre><code>struct Point {
    var x = 0.0, y = 0.0
}

struct Size {
    var width = 0.0, height = 0.0
}

struct Rect {
    var origin = Point()
    var size = Size()

    var center:Point {          // 计算属性
    get {
        let centerX = origin.x + (size.width / 2)
        let centerY = origin.y + (size.height / 2)
        return Point(x: centerX, y: centerY)
    }
    set(newCenter) {            // 若不提供新值变量名，则默认为newValue
        origin.x = newCenter.x - size.width / 2
        origin.y = newCenter.y - size.height / 2
    }
    }

    var maxX:Float {        // 只读属性，省略get{}
        return Float(origin.x) + Float(size.width)
    }
}

var square = Rect(origin:Point(x: 0.0, y: 0.0), size:Size(width:100, height:100))

let initialSquareCenter = square.center
square.center = Point(x: 15.0, y:15.0)
square.maxX
</code></pre>

<h2>类型属性</h2>

<p>类型属性是与类型相关联的，而不是与类型的实例相关联。对于某一类型的所有实例，类型属性都只有一份拷贝。对于值类型，我们可以定义存储类型属性和计算类型属性。对于类，我们只能定义计算类型属性。和实例属性不同的是，我们总是需要给存储类型属性一个默认值。这是因为类型没有初始化方法来初始化类型属性。</p>

<p>类型属性的访问和设置与实例属性一样，不一样的是，类型属性通过类型来获取和设置，而不是类型的实例</p>

<h6>代码清单3</h6>

<pre><code>struct AudioChannel {
    static let threaholdLevel = 10
    static var maxInputLevelForAllChannels = 0

    var currentLevel:Int = 0 {
    didSet{
        if currentLevel &gt; AudioChannel.threaholdLevel {
            currentLevel = AudioChannel.threaholdLevel
        }

        if currentLevel &gt; AudioChannel.maxInputLevelForAllChannels {
            AudioChannel.maxInputLevelForAllChannels = currentLevel
        }
    }
    }
}

var leftChannel = AudioChannel()
var rightChannel = AudioChannel()

leftChannel.currentLevel = 7

println(leftChannel.currentLevel)       // 7
println(AudioChannel.maxInputLevelForAllChannels)   // 7

rightChannel.currentLevel = 11
println(rightChannel.currentLevel)      // 10
println(AudioChannel.maxInputLevelForAllChannels)   // 10
</code></pre>

<h2>属性观察者</h2>

<p>属性观察者用于监听和响应属性值的变化。在每次设置属性值的时候都会调用属性观察者方法，即使新旧值是一样的。我们可以为任何存储属性定义属性观察者，除了懒惰存储属性。我们同样可以在子类中给继承而来的属性添加观察者。</p>

<p>对于计算属性，我们不需要定义属性观察者，因为我们可以在计算属性的setter中直接观察并响应这种值的变化。</p>

<p>我们通过设置以下观察方法来定义观察者</p>

<ol>
<li>willSet：在属性值被存储之前设置。此时新属性值作为一个常量参数被传入。该参数名默认为newValue，我们可以自己定义该参数名</li>
<li>didSet：在新属性值被存储后立即调用。与willSet相同，此时传入的是属性的旧值，默认参数名为oldValue。</li>
</ol>


<p>willSet与didSet只有在属性第一次被设置时才会调用，在初始化时，不会去调用这些监听方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift闭包二：循环引用]]></title>
    <link href="http://southpeak.github.io/blog/2014/06/27/ios-swift-closures-2/"/>
    <updated>2014-06-27T19:10:38+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/06/27/ios-swift-closures-2</id>
    <content type="html"><![CDATA[<p>我们在<a href="http://southpeak.github.io/blog/2014/06/27/ios-swift-closures/">闭包的基础概念</a>中讲到闭包是引用类型的，因此，与Objective-C的block一样，可能导致循环引用的问题。</p>

<h2>问题的产生</h2>

<p>当我们给一个类指定一个闭包属性时，这个类的实例便包含了闭包的一个引用。如果在这个闭包中，又引用了类实例本身，这是闭包便创建了一个指向类实例的强引用，这种情况下，又产生了循环引用。</p>

<p>如代码清单1所示：HTMLElement类定义了一个闭包属性asHTML。在这个闭包中引用了self，即闭包捕获了self，这就意味着闭包维护了一个指向HTMLElement实例的强引用。这样就在两者间创建了一个强引用循环。</p>

<h6>代码清单1：闭包循环引用</h6>

<pre><code>class HTMLElement {

    let name:String
    let text:String?

    @lazy var asHTML:() -&gt; String = {
        if let text = self.text {
            return "&lt;\(self.name)]]&gt;\(self.text)&lt;/\(self.name)&gt;"
        } else {
            return "&lt;\(self.name) /&gt;"
        }
    }

    init(name:String, text:String? = nil) {
        self.name = name
        self.text = text
    }

    deinit {
        println("\(name) is being deinitialized")
    }
}
</code></pre>

<h2>解决方案</h2>

<p>我们可以通过“捕获列表”来解决这种循环引用问题。“捕获列表”定义了在闭包内部捕获的引用类型的使用规则。与两个类之间的强引用循环一样，我们声明每一个捕获引用为weak或者unowned引用。选择weak或者unowned依赖于两者之间的关系。</p>

<p>一个“捕获列表项”是一个weak(unowned)—类实例引用对。它们放在[]中，项与项之间使用“,”号隔开。</p>

<p>当闭包和捕获实例总是相互引用，且两者同时释放时，我们将“捕获引用”设置为unowned。如果“捕获引用”可能在某个点被设置成nil，则将其设置为weak。weak引用通常都是optional类型，当引用的实例被释放时，被设置成nil。</p>

<p>在代码清单1中，我们可以用unowned来处理这种循环引用问题。如代码清单2所示：</p>

<h6>代码清单2：unowned引用</h6>

<pre><code>class HTMLElement {

    let name:String
    let text:String?

    @lazy var asHTML:() -&gt; String = {
        [unowned self] in
        if let text = self.text {
            return "&lt;\(self.name)]]&gt;\(self.text)&lt;/\(self.name)&gt;"
        } else {
            return "&lt;\(self.name) /&gt;"
        }
    }

    init(name:String, text:String? = nil) {
        self.name = name
        self.text = text
    }

    deinit {
        println("\(name) is being deinitialized")
    }
}
</code></pre>

<p>在这种情况下，闭包维护了HTMLElement实例的一个unowned引用，而不再是一个强引用。</p>

<p>注：虽然在闭包中多次引用了self，但闭包只会维护HTMLElement实例的一个引用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift闭包一：闭包基础概念]]></title>
    <link href="http://southpeak.github.io/blog/2014/06/27/ios-swift-closures/"/>
    <updated>2014-06-27T16:25:56+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/06/27/ios-swift-closures</id>
    <content type="html"><![CDATA[<p>熟悉Objective-C的朋友一定知道Objective-C中的block，iOS在6.0后开始大量使用block。而在swift中，也提供了类似的功能：Closures(在Java等语言中翻译为“闭包”)。</p>

<p>Closures是自包含的功能块。它可以捕获和存储其所在上下文的常量和变量的引用。全局函数和嵌套函数其实都是闭包。闭包有以下三种形式：</p>

<ol>
<li>全局函数：有函数名，但不能获取任何外部值</li>
<li>嵌套函数：有函数名，同时可以从其上下文中捕获值</li>
<li>闭包表达式：以一种轻量级的语法定义的未命名闭包，可以从其上下文中捕获值</li>
</ol>


<p>swift对闭包表达式作了一些优化处理，主要包括：</p>

<ol>
<li>从上下方中推断出参数和返回值</li>
<li>可以从单一表达式闭包中隐式返回</li>
<li>速记(Shorthand)参数名</li>
<li>尾随闭包语法</li>
</ol>


<p>下面会对这几点分别说明</p>

<h2>闭包表达式</h2>

<p>闭包表达式提供了一种更加简洁、专注的方式来实现内嵌函数的功能。闭包表达式的通用格式如下</p>

<pre><code>{(parameters) -&gt; return type in
    statement   
}
</code></pre>

<p>闭包的参数可以是常量、变量、inout、可变参数列表、元组，但是不能提供默认值。返回值可以是通用类型，也可以是元组。闭包实现体位于in关键字后面，该关键字是闭包参数和返回值的声明和实现体的分界。</p>

<h6>代码清单1: 使用sort函数对数组进行排序</h6>

<pre><code>let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

// 方法1：使用普通函数(或内嵌函数)提供排序功能
func backwards(s1:String, s2:String) -&gt; Bool {
    return s1 &gt; s2
}

var reversed = sort(names, backwards)

// 方法2：使用闭包表达式提供排序功能
reversed = sort(names, {
        (s1:String, s2:String) -&gt; Bool in
            return s1 &gt; s2
    })

// 方法3：类型推断,省略闭包表达式的参数及返回类型
reversed = sort(names, { s1, s2 in return s1 &gt; s2})

// 方法4：单一表达式：省略return关键字
reversed = sort(names, { s1, s2 in s1 &gt; s2 })

// 方法5：速记参数名
reversed = sort(names, { $0 &gt; $1 })

// 方法6：操作符函数
reversed = sort(names, &gt;)
</code></pre>

<p>swift标准库提供了sort用来对数据进行排序，它包含两个参数：</p>

<ol>
<li>待排序的已知类型的数组</li>
<li>排序函数(闭包)：带有两个类型相同的参数，并返回Bool值来告知第一个参数是显示排在第二个参数之前还是之后。</li>
</ol>


<p>代码清单1提供了几种方式来实现sort的排序函数</p>

<ol>
<li>方法1：使用普通函数(嵌套函数)，这种方法略显示复杂，且代码不够紧凑</li>
<li>方法2：内联闭包表达式，参数和返回值都位于大括号内，而不是外部</li>
<li>方法3：借助于swift强大的类型推断功能，我们甚至可以省略参数和返回值的类型。这样返回箭头->和返回类型都可以省略。在传递闭包给函数时，总是可以推断出参数类型和返回值，所以，我们很少需要明确写出内联闭包的完整格式。</li>
<li>方法4：如果闭包体只有一行代码，则可以省略retrun关键字，让闭包隐式返回单一表达式的值。</li>
<li>方法5：速记(Shorthand)参数名：swift为内联闭包提供了速记参数名，可以通过$0, $1, $2等参数名来索引闭包的参数。如果使用这种参数名，则可以直接省略参数列表，而参数的个数和类型可以自动推断出来。in关键字也可以省略</li>
<li>方法6：更极端的情况是，swift的字符串类型定义了>操作符，该操作符可以看作是带有两个参数的函数，并返回一个Bool值。而这正好符合sort函数的需求，我们可以只是简单的传入一个>，swift可以自动推断出我们想使用的实现。</li>
</ol>


<h2>尾随闭包(Trailing Closures)</h2>

<p>如果将闭包作为函数的最后一个参数，且闭包的实现体很长，则调用函数时可以使用尾随闭包。尾随闭包位于参数列表括号的后面。其格式如下：</p>

<pre><code>someFunctionThatTakesAClosure() {
    // 尾随闭包实现    
}
</code></pre>

<p>因此sort函数同样可以如下实现</p>

<h6>代码清单2: 使用尾随闭包实现sort函数</h6>

<pre><code>// 方法7：尾随闭包
reversed = sort(names) { $0 &gt; $1 }
</code></pre>

<p>另外，如果函数只有一个闭包参数，同时将闭包参数实现为尾随闭包，则在调用函数时可以省略参数列表的()，如代码清单3所示：</p>

<h6>代码清单3：函数只有一个闭包参数，同时将闭包参数实现为尾随闭包</h6>

<pre><code>let strings = numbers.map {
    (var name) -&gt; String in
    var output = ""
    while number &gt; 0 {
        output = digitNames[number % 10]! + output
        number /= 10
    }

    return number
}
</code></pre>

<h2>获取上下文的值</h2>

<p>和Objective-C的block一样，闭包可以获取定义它的上下文中常量或变量的值，同时可以在闭包体内引用和修改这些常量或变量的值，即使定义这些常量或变量的域已经销毁。</p>

<p>由于内嵌函数也是闭包，因此我们以内嵌函数为例，看看闭包如何获取上下文的常量和变量</p>

<h6>代码清单4：获取上下文值</h6>

<pre><code>func makeIncrementor(amount:Int) -&gt; () -&gt; Int {
    var runningTotal = 0
    func incrementor() -&gt; Int {
        runningTotal += amount
        return runningTotal
    }

    return incrementor
}
</code></pre>

<p>在代码清单4中，内嵌函数incriminator从上下文获取了两个值runningTotal和amount，其中amount是函数makeIncrementor的参数，runningTotal是函数内部定义的变量。由于incrementor没有修改amount，所以它实际上存储了amount的一份拷贝。而runningTotal在incremetor中被修改了，因此increminator存储了runningTotal的引用，这样确保runningTotal一直有效。</p>

<p>swift决定捕获的值哪些需要拷贝值，而哪些只拷贝引用。在runningTotal不再使用时，swift负责释放其内存。</p>

<h6>代码清单5：makeIncrementor使用</h6>

<pre><code>let incrementByTen = makeIncrementor(amount:10)

incrementByTen()    // returns a value of 10
incrementByTen()    // returns a value of 20
incrementByTen()    // returns a value of 30

// 定义另一个incrementor，则它有自己独立的runningTotal
let incrementBySeven = makeIncrementor(amount:7)

incrementBySeven()  // returns a value of 7
incrementBySeven()  // returns a value of 14
incrementBySeven()  // returns a value of 21
</code></pre>

<h2>引用类型</h2>

<p>在代码清单5中，虽然incrementByTen和incrementBySeven定义为常量，但是闭包仍然可以增加runningTotal的值。这是因为函数和闭包都是引用类型。</p>

<p>当定义一个函数(闭包)常量或变量时，实际上定义的是一个指向函数(闭包)的引用。这意味着如果指定一个闭包给两个不同的常量或变量，则这两个常量和变量将引用同一个函数(闭包)</p>

<h6>代码清单6：引用函数(闭包)</h6>

<pre><code>let incrementByTen = makeIncrementor(amount:10)
incrementByTen()    // returns a value of 10
incrementByTen()    // returns a value of 20
incrementByTen()    // returns a value of 30

let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()  // returns a value of 40
</code></pre>

<p>这样，就引出另一个问题：循环引用。我们将会在<a href="http://southpeak.github.io/blog/2014/06/27/ios-swift-closures-2/">下一篇文章</a>中介绍这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[题记-写在前面]]></title>
    <link href="http://southpeak.github.io/blog/2014/06/26/preface/"/>
    <updated>2014-06-26T19:34:42+08:00</updated>
    <id>http://southpeak.github.io/blog/2014/06/26/preface</id>
    <content type="html"><![CDATA[<p>以前写过一些技术文章，也翻译过一些文章，但都是三天打鱼两天晒网的，没能长久的坚持下来。另外，也是这边写一点那边写一点，零零散散的，时间久了，有些自己都找不着了。年纪越长，越觉得这是种损失。很多东西没能及时整理，也都淡忘了，说来怪可惜的。</p>

<p>细想一下，之前主要是因为太懒。虽然学习过程中会做一些笔记，写写总结，但那都是给自己看的，怎么写都行。但如果要发布出来，就得整理成一篇像样的东西，至少得让人看得懂。就像我们写代码一样，用最少的代码实现所需要的功能，而且性能还要好。写技术文章也一样，用最少的文字将所要讲的东西表述清楚，思路要清晰，表达要清楚。这对于语文一向不好的我，写文章确实是个难题，便懈怠了。现在看来这是莫大的损失，失去了自我提升的机会。</p>

<p>另外还有个原因，就是很多平台的编辑器做得都不咋滴，写出来的东西最后排版出来总是让人觉得不舒服。呵呵，我还是有那么点洁癖，自己看着不舒服，也就不太想去打理了。</p>

<p>最近这段时间看技术博客，发现很多博客都是用octopress发布的。嗨，发现这个还不错，整体排版看着也挺舒服的。这种简洁干练的风格符合我的审美观，这又勾起了我写博客的欲望。于是乎决定把以前写的一些东东都归整归整到这里来，另外确实需要去提升自己这方面的能力，同时更好的总结总结技术，与人一起分享。</p>

<p>我喜欢登山，知道登山的乐趣所在。正如我的副标题一样：攀登，一步一个脚印，方能知其乐。我也希望通过这点滴的积累，来找到更多的乐趣。</p>

<h6>写于2014.06.26，勉</h6>
]]></content>
  </entry>
  
</feed>
